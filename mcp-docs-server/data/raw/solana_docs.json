{
  "source": "https://solana.com/docs",
  "crawled_at": "2025-10-10T03:15:11.026754Z",
  "total_pages": 10,
  "total_words": 13110,
  "pages": [
    {
      "url": "https://solana.com/docs",
      "content": "[Crypto's biggest startup competition is so back. Sign up now for the Solana Cypherpunk Hackathon](https://colosseum.com/cypherpunk)\nThis website uses cookies to offer you a better browsing experience. Find out more on how we use cookies.\nOpt-out[Details](https://solana.com/privacy-policy#collection-of-information)\nAccept\n[](https://solana.com/)\n  * Learn\n  * Developers\n  * Solutions\n  * Network\n  * Community\n\n\nSearch\n[Documentation](https://solana.com/docs)[API](https://solana.com/docs/rpc)[Cookbook](https://solana.com/developers/cookbook)[Get Support](https://solana.stackexchange.com/)\nGetting Started\n[Installation](https://solana.com/docs/intro/installation)\n[Quick Start](https://solana.com/docs/intro/quick-start)\n[Reading from Network](https://solana.com/docs/intro/quick-start/reading-from-network)[Writing to Network](https://solana.com/docs/intro/quick-start/writing-to-network)[Deploy a Program](https://solana.com/docs/intro/quick-start/deploying-programs)[Creating Deterministic Accounts](https://solana.com/docs/intro/quick-start/program-derived-address)[Composing Multiple Programs](https://solana.com/docs/intro/quick-start/cross-program-invocation)\n[Core Concepts](https://solana.com/docs/core)\n[Solana Account Model](https://solana.com/docs/core/accounts)[Transactions and Instructions](https://solana.com/docs/core/transactions)[Transaction Fees](https://solana.com/docs/core/fees)[Programs on Solana](https://solana.com/docs/core/programs)[Program Derived Address](https://solana.com/docs/core/pda)[Cross Program Invocation](https://solana.com/docs/core/cpi)\n[Tokens on Solana](https://solana.com/docs/tokens)\n[Basics](https://solana.com/docs/tokens/basics)\n[Extensions](https://solana.com/docs/tokens/extensions)\nDeveloping Programs\nFrontend\nSolana SDKs\nReferences\nGetting Started\n[Solana Documentation](https://solana.com/docs)\n# [Solana Documentation](https://solana.com/docs)\n## [Getting Started](https://solana.com/docs#getting-started)\n### [Quickstart Build your first Solana program directly in the browser](https://solana.com/docs/intro/quick-start)### [Setup Local Environment Install dependencies for Solana development](https://solana.com/docs/intro/installation)\n### [Deploy Your First Solana Application](https://solana.com/docs#deploy-your-first-solana-application)\n### [Deploy on Vercel Deploy your first Solana application on Vercel](https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fsolana-developers%2Fanchor-web3js-nextjs&root-directory=frontend&demo-title=Anchor%20Web3.js%20Next.js%20Demo&demo-description=An%20example%20deployment%20of%20the%20Anchor%20Web3.js%20Next.js%20project.&demo-url=https%3A%2F%2Fanchor-web3js-nextjs.vercel.app%2F&project-name=anchor-web3js-nextjs&repository-name=anchor-web3js-nextjs)### [Vercel Preview Try the deployed application](https://anchor-web3js-nextjs-jade.vercel.app/)\nDeploy your first Solana application - a simple Counter Program built using the Anchor framework. This example covers all the core Solana concepts to get started building on Solana. View the source code [here](https://github.com/solana-developers/anchor-web3js-nextjs).\n## [Try Solana: Play 2048](https://solana.com/docs#try-solana-play-2048)\nPlay 2048 on Solana where every move sends a transaction. Click \"Play\" to start with a funded devnet wallet and use the arrow keys to play. If on mobile, swipe to control the tiles.\nBuilt by [Jonas](https://x.com/SolPlay_jonas), from the Solana Foundation DevRel team.\n## [Start Learning](https://solana.com/docs#start-learning)\nLearn the key concepts specific to Solana development.\n### [Accounts How Solana stores data](https://solana.com/docs/core/accounts)### [Fees on Solana Costs to send transactions on Solana](https://solana.com/docs/core/fees)### [Transactions How to interact with the Solana network](https://solana.com/docs/core/transactions)### [Programs Smart contracts on Solana](https://solana.com/docs/core/programs)### [Programs Derived Address How to generate deterministic addresses](https://solana.com/docs/core/pda)### [Cross Program Invocation How to call one program from another](https://solana.com/docs/core/cpi)\n### [Client Side Development](https://solana.com/docs#client-side-development)\nIf you develop on the client side, the following community-contributed SDKs help you interact with the network in popular languages:\nLanguage | SDK  \n---|---  \nRust | [solana_sdk](https://docs.rs/solana-sdk/latest/solana_sdk/)  \nTypescript | [@solana/web3.js](https://github.com/anza-xyz/solana-web3.js)  \nPython | [solders](https://github.com/kevinheavey/solders)  \nJava |  [sava](https://sava.software) or [solanaj](https://github.com/skynetcap/solanaj) or [solana4j](https://github.com/LMAX-Exchange/solana4j)  \nC++ |  [solcpp](https://github.com/mschneider/solcpp) or [solana-c](https://github.com/VAR-META-Tech/solana-c-sdk)  \nGo | [solana-go](https://github.com/gagliardetto/solana-go)  \nKotlin |  [sol4k](https://github.com/sol4k/sol4k) or [solanaKT](https://github.com/metaplex-foundation/SolanaKT)  \nDart | [solana](https://github.com/espresso-cash/espresso-cash-public/tree/master/packages/solana)  \nC# | [solnet](https://github.com/bmresearch/Solnet)  \nGdScript | [godot](https://github.com/Virus-Axel/godot-solana-sdk/)  \n## [Running a validator](https://solana.com/docs#running-a-validator)\nExplore what it takes to operate a Solana validator and help secure the network.\n### [Validators Individual nodes securing the Solana network](https://docs.anza.xyz/validator/anatomy)### [System Requirements Recommended hardware requirements and SOL required to operate a validator](https://docs.anza.xyz/operations/requirements)### [Validator Setup Setup a validator and get connected to a cluster for the first time](https://docs.anza.xyz/operations/setup-a-validator)\n## [Getting Support](https://solana.com/docs#getting-support)\nGet help from the Solana community on [Solana StackExchange](https://solana.stackexchange.com).\nIs this page helpful?\n[Next Quick Installation](https://solana.com/docs/intro/installation)\n[Getting Started](https://solana.com/docs#getting-started)[Deploy Your First Solana Application](https://solana.com/docs#deploy-your-first-solana-application)[Try Solana: Play 2048](https://solana.com/docs#try-solana-play-2048)[Start Learning](https://solana.com/docs#start-learning)[Client Side Development](https://solana.com/docs#client-side-development)[Running a validator](https://solana.com/docs#running-a-validator)[Getting Support](https://solana.com/docs#getting-support)\n[Edit Page](https://github.com/solana-foundation/solana-com/blob/main/apps/web/content/docs/en/index.mdx)\nManaged by\n[](https://solana.com/)\n[](https://solana.com/youtube)[](https://solana.com/twitter)[](https://solana.com/discord)[](https://solana.com/reddit)[](https://solana.com/github)[](https://solana.com/telegram)\n© 2025 Solana Foundation. All rights reserved.\nSolana\n  * [Grants](https://solana.org/grants)\n  * [Break Solana](https://break.solana.com/)\n  * [Media Kit](https://solana.com/branding)\n  * [Careers](https://jobs.solana.com/)\n  * [Disclaimer](https://solana.com/tos)\n  * [Privacy Policy](https://solana.com/privacy-policy)\n\n\nGet Connected\n  * [Blog](https://solana.com/news)\n  * [Newsletter](https://solana.com/newsletter)\n\n\nen\n© 2025 Solana Foundation. All rights reserved.\nLearn how the Solana blockchain works | Solana\n",
      "wordCount": 486,
      "title": "Learn how the Solana blockchain works | Solana"
    },
    {
      "url": "https://solana.com/privacy-policy",
      "content": "[Crypto's biggest startup competition is so back. Sign up now for the Solana Cypherpunk Hackathon](https://colosseum.com/cypherpunk)\nThis website uses cookies to offer you a better browsing experience. Find out more on how we use cookies.\nOpt-out[Details](https://solana.com/privacy-policy#collection-of-information)\nAccept\n[](https://solana.com/)\n  * Learn\n  * Developers\n  * Solutions\n  * Network\n  * Community\n\n\nSearch\nOptional Eyebrow\n# Powerful for developers. Fast for everyone.\nLast modified date: October 11, 2023\n  \n\nThis privacy policy (\"**_Privacy Policy_** \") explains how Solana Foundation (\"**_Solana_** ,\" \"**_our_** ,\" \"**_we_** ,\" or \"**_us_** \") collects, uses, and discloses information about you. This Privacy Policy applies when you use [www.solana.com](http://www.solana.com) (the \"**_Website_** \"), contact our customer service team, engage with us on social media, or otherwise interact with us.\nWe may change this Privacy Policy from time to time. If we make changes, we will notify you by revising the date at the top of this policy and, in some cases, we may provide you with additional notice (such as adding a statement to our Website or sending you a notification). We encourage you to review this Privacy Policy regularly to stay informed about our information practices and the choices available to you.\n### CONTENTS\n  * [Collection of Information](https://solana.com/privacy-policy#collection-of-information)\n  * [Use of Information](https://solana.com/privacy-policy#use-of-information)\n  * [Sharing of Information](https://solana.com/privacy-policy#sharing-of-information)\n  * [Analytics](https://solana.com/privacy-policy#analytics)\n  * [Transfer of Information to the United States and Other Countries](https://solana.com/privacy-policy#transfer-of-information-to-the-united-states-and-other-countries)\n  * [Your Choices](https://solana.com/privacy-policy#your-choices)\n  * [Your California Privacy Rights](https://solana.com/privacy-policy#your-california-privacy-rights)\n  * [Additional Disclosures for Individuals in Europe](https://solana.com/privacy-policy#additional-disclosures-for-individuals-in-europe)\n  * [Contact Us](https://solana.com/privacy-policy#contact-us)\n\n\n### COLLECTION OF INFORMATION\n**Information You Provide to Us**\nWe collect information you provide directly to us. For example, you share information directly with us when you fill out a form, make a purchase, communicate with us via third-party platforms, participate in a contest or promotion, request customer support, or otherwise communicate with us. The types of personal information we may collect include your name, email address, postal address, phone number, credit card and other payment information, and any other information you choose to provide.\n**Information We Collect Automatically When You Interact with Us**\nWhen you access or use our Website or otherwise transact business with us, we automatically collect certain information, including:\n  * **Transactional Information:**\n\n\n> When you make a purchase or return, we collect information about the transaction, such as product details, purchase price, and the date and location of the transaction.\n  * **Device and Usage Information:**\n\n\n> We collect information about how you access our Website, including data about the device and network you use, such as your hardware model, operating system version, mobile network, IP address, unique device identifiers, browser type, and app version. We also collect information about your activity on our Website, such as access times, pages viewed, links clicked, and the page you visited before navigating to our Website.\n  * **Location Information:**\n\n\n> In accordance with your device permissions, we may collect information about the precise location of your device. You may stop the collection of precise location information at any time (see the [Your Choices](https://solana.com/privacy-policy#your-choices) section below for details).\n  * **Information Collected by Cookies and Similar Tracking Technologies:**\n\n\n> We (and our service providers) use tracking technologies, such as cookies and web beacons, to collect information about you. Cookies are small data files stored on your hard drive or in device memory that help us improve our Website and your experience, see which areas and features of our Website are popular, and count visits. Web beacons (also known as \"pixel tags\" or \"clear GIFs\") are electronic images that we use on our Website and in our emails to help deliver cookies, count visits, and understand usage and campaign effectiveness. For more information about cookies and how to disable them, the [Your Choices](https://solana.com/privacy-policy#your-choices) section below.\n**Information We Collect from Other Sources**\nWe obtain information from third-party sources. For example, we may collect information about you from identity verification services, data analytics providers, and mailing list providers (if applicable).\n### USE OF INFORMATION\nWe use the information we collect to:\n  * Provide, maintain, and improve our products and services;\n  * Process transactions and send you related information, including confirmations, receipts, invoices, customer experience surveys, and recall notices;\n  * Personalize and improve your experience on our Website;\n  * Send you technical notices, security alerts, and support and administrative messages;\n  * Respond to your comments and questions and provide customer service;\n  * Communicate with you about products, services, and events offered by Solana and others and provide news and information that we think will interest you (see the [Your Choices](https://solana.com/privacy-policy#your-choices) section below for information about how to opt out of these communications at any time);\n  * Monitor and analyze trends, usage, and activities in connection with our Website;\n  * Facilitate contests, sweepstakes, and promotions and process and deliver entries and rewards;\n  * Detect, investigate, and prevent security incidents and other malicious, deceptive, fraudulent, or illegal activity and protect the rights and property of Solana and others;\n  * Debug to identify and repair errors in our Website;\n  * Comply with our legal and financial obligations; and\n  * Carry out any other purpose described to you at the time the information was collected.\n\n\n### SHARING OF INFORMATION\nWe share personal information in the following circumstances or as otherwise described in this policy:\n  * We share personal information with vendors, service providers, and consultants that need access to personal information in order to perform services for us, such as companies that assist us with web hosting, shipping and delivery, payment processing, fraud prevention, customer service, data analytics and marketing and advertising.\n  * We may disclose personal information if we believe that disclosure is in accordance with, or required by, any applicable law or legal process, including lawful requests by public authorities to meet national security or law enforcement requirements.\n  * We may share personal information if we believe that your actions are inconsistent with our user agreements or policies, if we believe that you have violated the law, or if we believe it is necessary to protect the rights, property, and safety of Solana, our users, the public, or others.\n  * We share personal information with our lawyers and other professional advisors where necessary to obtain advice or otherwise protect and manage our business interests.\n  * We may share personal information in connection with, or during negotiations concerning, any merger, sale of company assets, financing, or acquisition of all or a portion of our business by another company.\n  * We share personal information with your consent or at your direction.\n\n\nWe also share aggregated or de-identified information that cannot reasonably be used to identify you.\n### ANALYTICS\nWe allow others to provide analytics services on our behalf across the web and in mobile apps. These entities may use cookies, web beacons, device identifiers, and other technologies to collect information about your use of our Website and other websites and applications, including your IP address, web browser, mobile network information, pages viewed, time spent on pages or in mobile apps, links clicked, and conversion information. This information may be used by Solana and others to, among other things, research, analyze and track data, determine the popularity of certain content, and better understand your online activity. However, if you have deleted and disabled cookies, these uses will not be possible to the extent they are based on cookie information. We use Google Analytics to analyze traffic. You can find out more information about Google Analytics cookies by visiting the following location provided: <https://developers.google.com/analytics/devguides/collection/analyticsjs/cookie-usage>. To opt out of Google Analytics relating to your use of our site, you can download and install the Browser Plugin available by visiting the following location provided: <https://tools.google.com/dlpage/gaoptout?hl=en>.\n### TRANSFER OF INFORMATION TO THE UNITED STATES AND OTHER COUNTRIES\nSolana operates and engages service providers in various jurisdictions. Therefore, we and our service providers may transfer your personal information to, or store or access it in, jurisdictions that may not provide levels of data protection that are equivalent to those of your home jurisdiction. By using our site, you acknowledge and agree to such transfers and processing, including to and in the United States. We will take steps to ensure that your personal information receives an adequate level of protection in the jurisdictions in which we process it.\n### YOUR CHOICES\n**Cookies**\nMost browsers are set to accept cookies by default. If you prefer, you can usually set your browser to disable cookies, or to alert you when cookies are being sent. Likewise, most mobile devices allow you to disable the ability for geolocation information to be collected from your mobile device. The help function on most browsers and mobile devices contains instructions on how to set your browser to notify you before accepting cookies, disable cookies entirely, or disable the collection of geolocation data. You need to set each browser, on each device you use to surf the Web. Thus, if you use multiple browsers (e.g., Chrome, Safari, Internet Explorer, Firefox, etc.), you should repeat this procedure with each one. Similarly, if you connect to the Web from multiple devices (e.g., work and home), you need to set each browser on each device. Depending on your jurisdiction, you may be able to utilize additional cookie management tools. Please note that removing or rejecting cookies could affect the availability and functionality of our Website.\n**Communications Preferences**\nYou may opt out of receiving newsletters from Solana by following the instructions in those communications.\n### YOUR CALIFORNIA PRIVACY RIGHTS\nThe California Consumer Privacy Act or \"**_CCPA_** \" (Cal. Civ. Code § 1798.100 _et seq._) affords consumers residing in California certain rights with respect to their personal information. If you are a California resident, this section applies to you.\n**_California Consumer Privacy Act_**\nIn the preceding 12 months, we have collected the following categories of personal information: identifiers, financial information, biometric information, internet or electric network activity information, and geolocation data. For details about the precise data points we collect and the categories of sources of such collection, please see the [Collection of Information](https://solana.com/privacy-policy#collection-of-information) section above. We collect personal information for the business and commercial purposes described in the [Use of Information](https://solana.com/privacy-policy#use-of-information) section above. In the preceding 12 months, we have disclosed the following categories of personal information for business purposes to the following categories of recipients:\n**_Category of Personal Information_**\n  * Financial Information\n\n\n**_Categories of Recipients_**\n  * Payment provider\n  * Third-party logistics providers\n\n\nSolana does not sell your personal information.\nSubject to certain limitations, you have the right to (1) request to know more about the categories and specific pieces of personal information we collect, use, and disclose, (2) request deletion of your personal information, and (3) not be discriminated against for exercising these rights. You may make these requests by contacting us at operations@solana.com. We will verify your request by asking you to provide information related to your recent interactions with us. We will not discriminate against you if you exercise your rights under the CCPA.\n### ADDITIONAL DISCLOSURES FOR INDIVIDUALS IN EUROPE\nIf you are located in the European Economic Area (\"**_EEA_** \"), the United Kingdom, or Switzerland, you have certain rights and protections under the law regarding the processing of your personal data, and this section applies to you.\n**Legal Basis for Processing**\nWhen we process your personal data, we will do so in reliance on the following lawful bases:\n  * To perform our responsibilities under our contract with you (e.g., processing payments for and providing the products and services you requested).\n  * When we have a legitimate interest in processing your personal data to operate our business or protect our interests (e.g., to provide, maintain, and improve our products and services, conduct data analytics, and communicate with you).\n  * To comply with our legal obligations (e.g., to maintain a record of your consents and track those who have opted out of communications).\n  * When we have your consent to do so (e.g., when you opt in to receive communications from us). When consent is the legal basis for our processing your personal data, you may withdraw such consent at any time.\n\n\n**Data Retention**\nWe store other personal data for as long as necessary to carry out the purposes for which we originally collected it and for other legitimate business purposes, including to meet our legal, regulatory, or other compliance obligations.\n**Data Subject Requests**\nSubject to certain limitations, you have the right to request access to the personal data we hold about you and to receive your data in a portable format, the right to ask that your personal data be corrected or erased, and the right to object to, or request that we restrict, certain processing. If you would like to exercise any of these rights, please contact us at operations@solana.com.\n**Questions or Complaints**\nIf you have a concern about our processing of personal data that we are not able to resolve, you have the right to lodge a complaint with the Data Protection Authority where you reside. Contact details for your Data Protection Authority can be found using the links below:\nFor individuals in the EEA: <https://edpb.europa.eu/about-edpb/board/members_en>\nFor individuals in the UK: <https://ico.org.uk/global/contact-us/>\nFor individuals in Switzerland: <https://www.edoeb.admin.ch/edoeb/en/home/the-fdpic/contact.html>\n### CONTACT US\nIf you have any questions about this Privacy Policy, please contact us at operations@solana.com.\n![](https://cdn.builder.io/api/v1/pixel?apiKey=ce0c7323a97a4d91bd0baa7490ec9139)\nManaged by\n[](https://solana.com/)\n[](https://solana.com/youtube)[](https://solana.com/twitter)[](https://solana.com/discord)[](https://solana.com/reddit)[](https://solana.com/github)[](https://solana.com/telegram)\n© 2025 Solana Foundation. All rights reserved.\nSolana\n  * [Grants](https://solana.org/grants)\n  * [Break Solana](https://break.solana.com/)\n  * [Media Kit](https://solana.com/branding)\n  * [Careers](https://jobs.solana.com/)\n  * [Disclaimer](https://solana.com/tos)\n  * [Privacy Policy](https://solana.com/privacy-policy)\n\n\nGet Connected\n  * [Blog](https://solana.com/news)\n  * [Newsletter](https://solana.com/newsletter)\n\n\nen\n© 2025 Solana Foundation. All rights reserved.\n",
      "wordCount": 2228,
      "title": "Solana Privacy Policy | Solana"
    },
    {
      "url": "https://solana.com/",
      "content": "[Crypto's biggest startup competition is so back. Sign up now for the Solana Cypherpunk Hackathon](https://colosseum.com/cypherpunk)\nThis website uses cookies to offer you a better browsing experience. Find out more on how we use cookies.\nOpt-out[Details](https://solana.com/privacy-policy#collection-of-information)\nAccept\n[](https://solana.com/)\n  * Learn\n  * Developers\n  * Solutions\n  * Network\n  * Community\n\n\nSearch\n# Powerful for developers. Fast for everyone.\nBring blockchain to the people. Solana supports experiences for power users, new consumers, and everyone in between.\n[Start Building](https://solana.com/docs/intro/quick-start)[Resources](https://solana.com/developers)\n![](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252F4e7450bbc1114943b89ef51ea59fb791&w=3840&q=75)![](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252F4e7450bbc1114943b89ef51ea59fb791&w=3840&q=75)\nPowering tools and integrations from companies all around the world\n![Circle](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252F0b6a53cf32794fb192e318ceeb647516&w=256&q=75)\n![Discord](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252F99fc2e4c135d4284936a4dc130373935&w=256&q=75)\n![Google](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252Ff5a7df85e0f44af9b95eb92290694bfc&w=256&q=75)\n![Jump_](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252F5e82db5eeb674963ba79de5b82389c61&w=256&q=75)\n![Magic Eden](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252Fbf3ec5546f68436182b060308bffd31a&w=256&q=75)\n![Meta](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252Fb215a85c9d1841a48050a04d5d0269fe&w=256&q=75)\n![Shopify](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252F216601dcf61448b6861659e35f020ecd&w=256&q=75)\n![Stripe](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252F5c6fc8c39c58451d98affc20a146b12c&w=256&q=75)\n![Default Alt Text](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252Fa6945edeed3447c9bb2f85d251adf07a&w=3840&q=75)\nMOBILE\n## Solana Mobile Begins Shipping 150,000+ Seeker phones\nThe Saga successor flagship phone from Solana Labs includes Seed Vault key storage, a Solana dApp Store, and onchain Genesis Token perks, expanding Solana’s push into the mobile arena.\n[Learn more - Solana Mobile Begins Shipping 150,000+ Seeker phones](https://www.theblock.co/post/365600/solana-mobile-seeker-crypto-smartphone)\n![The Solana Breakpoint Conference](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252F9895ee6247ef455e8d21201f5a039593&w=3840&q=75)\nNEWS\n## Solana Breakpoint is bringing together 5000+ founders, builders, and institutions in Abu Dhabi this December\nSolana's global flagship event comes to the capital of capital from the 11-13 of December during F1 and Abu Dhabi Finance Week.\n[Get tickets - Solana Breakpoint is bringing together 5000+ founders, builders, and institutions in Abu Dhabi this December](https://solana.com/breakpoint)\n![](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252F92a7d124f4db4b73813f36b178e6a91b&w=3840&q=75)\nStartup competition with $2.5M in prizes & funding\n## The Solana Global Online Cypherpunk Hackathon is live\nCompete for prizes and scale your early-stage crypto products. Winners gain entry to Colosseum's accelerator program with $250k in pre-seed funding, elite mentorship, & San Francisco-based startup incubation to transform hackathon projects into funded companies. Submissions due October 30th.\n[Sign up now - The Solana Global Online Cypherpunk Hackathon is live](https://colosseum.com/cypherpunk)\n![A photo from Breakpoint 2025](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252F2601266e3e3142cf964935e5b28cb580&w=3840&q=75)\nINSTITUTIONS\n## The Block: Franklin Templeton Extends Franklin Onchain U.S. Government Money Fund to Solana\nUsers can access the fund, otherwise known as FOBXX, using Franklin Templeton's BENJI platform.\n[READ - The Block: Franklin Templeton Extends Franklin Onchain U.S. Government Money Fund to Solana](https://www.theblock.co/post/340432/franklin-templeton-extends-fobxx-fund-to-solana)\n![](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252F4df89af4736f402aa94864742a469442&w=3840&q=75)\nDEVELOPERS\n## Electric Capital: Solana Fastest Growing Ecosystem for New Builders\nThe report also states that 81% of all DEX transactions come from the Solana ecosystem.\n[Read - Electric Capital: Solana Fastest Growing Ecosystem for New Builders](https://www.developerreport.com/developer-report)\n![Default Alt Text](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252Fa6945edeed3447c9bb2f85d251adf07a&w=3840&q=75)\nMOBILE\n## Solana Mobile Begins Shipping 150,000+ Seeker phones\nThe Saga successor flagship phone from Solana Labs includes Seed Vault key storage, a Solana dApp Store, and onchain Genesis Token perks, expanding Solana’s push into the mobile arena.\n[Learn more - Solana Mobile Begins Shipping 150,000+ Seeker phones](https://www.theblock.co/post/365600/solana-mobile-seeker-crypto-smartphone)\n![The Solana Breakpoint Conference](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252F9895ee6247ef455e8d21201f5a039593&w=3840&q=75)\nNEWS\n## Solana Breakpoint is bringing together 5000+ founders, builders, and institutions in Abu Dhabi this December\nSolana's global flagship event comes to the capital of capital from the 11-13 of December during F1 and Abu Dhabi Finance Week.\n[Get tickets - Solana Breakpoint is bringing together 5000+ founders, builders, and institutions in Abu Dhabi this December](https://solana.com/breakpoint)\n![](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252F92a7d124f4db4b73813f36b178e6a91b&w=3840&q=75)\nStartup competition with $2.5M in prizes & funding\n## The Solana Global Online Cypherpunk Hackathon is live\nCompete for prizes and scale your early-stage crypto products. Winners gain entry to Colosseum's accelerator program with $250k in pre-seed funding, elite mentorship, & San Francisco-based startup incubation to transform hackathon projects into funded companies. Submissions due October 30th.\n[Sign up now - The Solana Global Online Cypherpunk Hackathon is live](https://colosseum.com/cypherpunk)\n![A photo from Breakpoint 2025](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252F2601266e3e3142cf964935e5b28cb580&w=3840&q=75)\nINSTITUTIONS\n## The Block: Franklin Templeton Extends Franklin Onchain U.S. Government Money Fund to Solana\nUsers can access the fund, otherwise known as FOBXX, using Franklin Templeton's BENJI platform.\n[READ - The Block: Franklin Templeton Extends Franklin Onchain U.S. Government Money Fund to Solana](https://www.theblock.co/post/340432/franklin-templeton-extends-fobxx-fund-to-solana)\n![](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252F4df89af4736f402aa94864742a469442&w=3840&q=75)\nDEVELOPERS\n## Electric Capital: Solana Fastest Growing Ecosystem for New Builders\nThe report also states that 81% of all DEX transactions come from the Solana ecosystem.\n[Read - Electric Capital: Solana Fastest Growing Ecosystem for New Builders](https://www.developerreport.com/developer-report)\n![Default Alt Text](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252Fa6945edeed3447c9bb2f85d251adf07a&w=3840&q=75)\nMOBILE\n## Solana Mobile Begins Shipping 150,000+ Seeker phones\nThe Saga successor flagship phone from Solana Labs includes Seed Vault key storage, a Solana dApp Store, and onchain Genesis Token perks, expanding Solana’s push into the mobile arena.\n[Learn more - Solana Mobile Begins Shipping 150,000+ Seeker phones](https://www.theblock.co/post/365600/solana-mobile-seeker-crypto-smartphone)\n  * 1\n  * 2\n  * 3\n  * 4\n  * 5\n\n\n## Join a community of millions.\n### 29.7M\nFee Paying Accounts, All Time\n### 340M+\nNFTs Minted\n### $0.00064\nMedian Fee per Transaction\n## Made for mass adoption.\nLive data\n### Fast\nDon’t keep your users waiting. Solana has block times of 400 milliseconds — and as hardware gets faster, so will the network.\n3,155\nTransactions per Second\n### Scalable\nGet big, quick. Solana is made to handle thousands of transactions per second, and fees for both developers and users remain less than $0.0025.\n453,965,972,182\nTotal Transactions\n### Decentralized\nThe Solana network is validated by thousands of nodes that operate independently of each other, ensuring your data remains secure and censorship resistant.\n957\nValidator Nodes\n### Energy Efficient\nSolana’s proof of stake network and other innovations minimize its impact on the environment. Each Solana transaction uses about the same energy as a few Google searches.\n0%\nNet Carbon Impact\n[Energy Efficient - Learn more](https://solana.com/environment)\n![](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252F2ffe062107544cffa49618a58b9c50bc&w=3840&q=75)![](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252F421b60c862fb4c2c9b9dc17ad67ff979&w=3840&q=75)\n#### Designed for real world use.\n[Go to Case Studies](https://solana.com/news/tag/case-studies)\n[ ![](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252Ff6af6a440836404080a1919059090128&w=3840&q=75)![](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252Ff6af6a440836404080a1919059090128&w=3840&q=75) Case StudyXP XP aims to save consumers from high event ticket fees using Solana.](https://solana.com/news/case-study-xp)\n[![](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252Ff6af6a440836404080a1919059090128&w=3840&q=75)![](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252Ff6af6a440836404080a1919059090128&w=3840&q=75) Case StudyXP XP aims to save consumers from high event ticket fees using Solana.](https://solana.com/news/case-study-xp)[![](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252Fa4517ce3de2b4a79bd6f78371656734c&w=3840&q=75)![](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252Fa4517ce3de2b4a79bd6f78371656734c&w=3840&q=75) case StudyBoba Guys Boba Guys used a Solana-powered loyalty program to increase monthly sales by 67%.](https://solana.com/news/case-study-boba-guys)[![](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252F20069e2d57e847369b00aca5a12cdaa2&w=3840&q=75)![](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252F20069e2d57e847369b00aca5a12cdaa2&w=3840&q=75) Case StudyHomebase Homebase used the Solana blockchain to successfully tokenized a single-family rental property.](https://solana.com/news/case-study-homebase)[![](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252Fa9ade8a6286248af8c7f90bf06900712&w=3840&q=75)![](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252Fa9ade8a6286248af8c7f90bf06900712&w=3840&q=75) VideoHivemapper Hivemapper decentralizes mapping with better real-time data and community incentives](https://solana.com/news/case-study-hivemapper)\n## Build for growth.\nPaymentsGamingNFTsDeFiDAOs\nPaymentsGamingNFTsDeFiDAOs\n![Shopify](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252F216601dcf61448b6861659e35f020ecd&w=640&q=75)\nSolana Pay is now available to millions of businesses as an approved app integration on Shopify. Solana Pay is built for immediate USDC transactions, fees that are fractions of a penny, and a net-zero environmental impact.\n[Learn more about Payments on Solana](https://solana.com/developers/payments)\n![](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252F7fcacf8bfcd44134944121d389d24edb&w=1920&q=75)\n![Asics Logo](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252Fb7cd5959a4a24b528f6a70e6cf16f137&w=256&q=75)![Decaf Logo](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252F49bfeb8d3b554624b1104e3310338da1&w=256&q=75)![Helio Logo](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252F6a83a1dd16874f22b668f9d18deefb85&w=256&q=75)![TipLink Logo](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252F4d797d63b0f34c469d47cae71e142e1e&w=256&q=75)\n## Join a thriving community.\n### 20,000\nSolana Hacker House participants\n![Solana Mobile Announcement](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252F0685fb9d54d04cafaa64d0e14b93d7bf&w=3840&q=75)\n### Solana Mobile Announcement\nUsers, developers, and reporters were on the scene when Solana Labs announced the Solana Mobile Stack and Saga device in June 2022.\n![Solana Breakpoint 2022](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252F7a69a91e298e4cc8adff84b098f22057&w=3840&q=75)\n### Solana Breakpoint 2022\n3,800 builders. 3 days. 1 community. Teams from around the world gathered in Lisbon in Nov. 2022 to learn, build, and celebrate at the annual conference from the Solana Foundation.\n![New York Hacker House](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252Ff9877ee1e50b4b0584aa72099d945889&w=3840&q=75)\n### New York Hacker House\nStart spreading the news. Lines were out the door at the Solana Foundation’s New York Hacker House in March 2022.\n### 48,000\nDevelopers building during Solana Hackathons\n![Seoul Hacker House](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252F449e94f570c54a04bb2fde2722f1a1e7&w=3840&q=75)\n### Seoul Hacker House\nLet’s build! Local devs came to the Solana Foundation’s Seoul Hacker House ahead of Korea Blockchain Week 2022.\n### 9,300\nTotal Solana Breakpoint attendees\n![London Hacker House](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252F5a00585d75e645248c709e5f95bc563b&w=3840&q=75)\n### London Hacker House\nBuilders joined London Hacker House, a five-day offline event in June 2022, with advice and support from core Solana Lab engineers.\n![Seoul Hacker House](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252Fad6396c634aa4194a28d4018d67524e1&w=3840&q=75)\n### Seoul Hacker House\nLet’s build! Local devs came to the Solana Foundation’s Seoul Hacker House ahead of Korea Blockchain Week 2022.\n![New Delhi Hacker House](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252Ffbd7ec2dc1c44504b245787179f8e7ff&w=3840&q=75)\n### New Delhi Hacker House\nVibe. Mint. Build. Thousands of developers came to build together at the Sept. 2022 New Delhi Solana Hacker House.\n### 2,082\nMonthly active programs\n![Solana Miami](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252F907db02faa204b1d911c4d075839ba6d&w=3840&q=75)\n### Solana Miami\nNew and native users came to Solana Miami in April 2022 to build, learn, and see real world Solana use cases.\n### 20,000\nSolana Hacker House participants\n![Solana Mobile Announcement](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252F0685fb9d54d04cafaa64d0e14b93d7bf&w=3840&q=75)\n### Solana Mobile Announcement\nUsers, developers, and reporters were on the scene when Solana Labs announced the Solana Mobile Stack and Saga device in June 2022.\n![Solana Breakpoint 2022](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252F7a69a91e298e4cc8adff84b098f22057&w=3840&q=75)\n### Solana Breakpoint 2022\n3,800 builders. 3 days. 1 community. Teams from around the world gathered in Lisbon in Nov. 2022 to learn, build, and celebrate at the annual conference from the Solana Foundation.\n![New York Hacker House](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252Ff9877ee1e50b4b0584aa72099d945889&w=3840&q=75)\n### New York Hacker House\nStart spreading the news. Lines were out the door at the Solana Foundation’s New York Hacker House in March 2022.\n### 48,000\nDevelopers building during Solana Hackathons\n![Seoul Hacker House](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252F449e94f570c54a04bb2fde2722f1a1e7&w=3840&q=75)\n### Seoul Hacker House\nLet’s build! Local devs came to the Solana Foundation’s Seoul Hacker House ahead of Korea Blockchain Week 2022.\n### 9,300\nTotal Solana Breakpoint attendees\n![London Hacker House](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252F5a00585d75e645248c709e5f95bc563b&w=3840&q=75)\n### London Hacker House\nBuilders joined London Hacker House, a five-day offline event in June 2022, with advice and support from core Solana Lab engineers.\n![Seoul Hacker House](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252Fad6396c634aa4194a28d4018d67524e1&w=3840&q=75)\n### Seoul Hacker House\nLet’s build! Local devs came to the Solana Foundation’s Seoul Hacker House ahead of Korea Blockchain Week 2022.\n![New Delhi Hacker House](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252Ffbd7ec2dc1c44504b245787179f8e7ff&w=3840&q=75)\n### New Delhi Hacker House\nVibe. Mint. Build. Thousands of developers came to build together at the Sept. 2022 New Delhi Solana Hacker House.\n### 2,082\nMonthly active programs\n![Solana Miami](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252F907db02faa204b1d911c4d075839ba6d&w=3840&q=75)\n### Solana Miami\nNew and native users came to Solana Miami in April 2022 to build, learn, and see real world Solana use cases.\n## It's time to join the thousands of creators, artists, and developers using Solana.\n[Start Building](https://solana.com/docs/intro/quick-start)\n![](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252F2ffe062107544cffa49618a58b9c50bc&w=3840&q=75)![](https://solana.com/_next/image?url=https%3A%2F%2Fcdn.builder.io%2Fapi%2Fv1%2Fimage%2Fassets%252Fce0c7323a97a4d91bd0baa7490ec9139%252F421b60c862fb4c2c9b9dc17ad67ff979&w=3840&q=75)\n![](https://cdn.builder.io/api/v1/pixel?apiKey=ce0c7323a97a4d91bd0baa7490ec9139)\nManaged by\n[](https://solana.com/)\n[](https://solana.com/youtube)[](https://solana.com/twitter)[](https://solana.com/discord)[](https://solana.com/reddit)[](https://solana.com/github)[](https://solana.com/telegram)\n© 2025 Solana Foundation. All rights reserved.\nSolana\n  * [Grants](https://solana.org/grants)\n  * [Break Solana](https://break.solana.com/)\n  * [Media Kit](https://solana.com/branding)\n  * [Careers](https://jobs.solana.com/)\n  * [Disclaimer](https://solana.com/tos)\n  * [Privacy Policy](https://solana.com/privacy-policy)\n\n\nGet Connected\n  * [Blog](https://solana.com/news)\n  * [Newsletter](https://solana.com/newsletter)\n\n\nen\n© 2025 Solana Foundation. All rights reserved.\n",
      "wordCount": 1549,
      "title": "Global Financial Infrastructure for Everyone | Solana"
    },
    {
      "url": "https://solana.com/docs/rpc",
      "content": "[Crypto's biggest startup competition is so back. Sign up now for the Solana Cypherpunk Hackathon](https://colosseum.com/cypherpunk)\nThis website uses cookies to offer you a better browsing experience. Find out more on how we use cookies.\nOpt-out[Details](https://solana.com/privacy-policy#collection-of-information)\nAccept\n[](https://solana.com/)\n  * Learn\n  * Developers\n  * Solutions\n  * Network\n  * Community\n\n\nSearch\n[Documentation](https://solana.com/docs)[API](https://solana.com/docs/rpc)[Cookbook](https://solana.com/developers/cookbook)[Get Support](https://solana.stackexchange.com/)\n[Solana RPC Methods](https://solana.com/docs/rpc)\n[Data Structures as JSON](https://solana.com/docs/rpc/json-structures)\n[HTTP Methods](https://solana.com/docs/rpc/http)\n[getAccountInfo](https://solana.com/docs/rpc/http/getaccountinfo)[getBalance](https://solana.com/docs/rpc/http/getbalance)[getBlock](https://solana.com/docs/rpc/http/getblock)[getBlockCommitment](https://solana.com/docs/rpc/http/getblockcommitment)[getBlockHeight](https://solana.com/docs/rpc/http/getblockheight)[getBlockProduction](https://solana.com/docs/rpc/http/getblockproduction)[getBlocks](https://solana.com/docs/rpc/http/getblocks)[getBlocksWithLimit](https://solana.com/docs/rpc/http/getblockswithlimit)[getBlockTime](https://solana.com/docs/rpc/http/getblocktime)[getClusterNodes](https://solana.com/docs/rpc/http/getclusternodes)[getEpochInfo](https://solana.com/docs/rpc/http/getepochinfo)[getEpochSchedule](https://solana.com/docs/rpc/http/getepochschedule)[getFeeForMessage](https://solana.com/docs/rpc/http/getfeeformessage)[getFirstAvailableBlock](https://solana.com/docs/rpc/http/getfirstavailableblock)[getGenesisHash](https://solana.com/docs/rpc/http/getgenesishash)[getHealth](https://solana.com/docs/rpc/http/gethealth)[getHighestSnapshotSlot](https://solana.com/docs/rpc/http/gethighestsnapshotslot)[getIdentity](https://solana.com/docs/rpc/http/getidentity)[getInflationGovernor](https://solana.com/docs/rpc/http/getinflationgovernor)[getInflationRate](https://solana.com/docs/rpc/http/getinflationrate)[getInflationReward](https://solana.com/docs/rpc/http/getinflationreward)[getLargestAccounts](https://solana.com/docs/rpc/http/getlargestaccounts)[getLatestBlockhash](https://solana.com/docs/rpc/http/getlatestblockhash)[getLeaderSchedule](https://solana.com/docs/rpc/http/getleaderschedule)[getMaxRetransmitSlot](https://solana.com/docs/rpc/http/getmaxretransmitslot)[getMaxShredInsertSlot](https://solana.com/docs/rpc/http/getmaxshredinsertslot)[getMinimumBalanceForRentExemption](https://solana.com/docs/rpc/http/getminimumbalanceforrentexemption)[getMultipleAccounts](https://solana.com/docs/rpc/http/getmultipleaccounts)[getProgramAccounts](https://solana.com/docs/rpc/http/getprogramaccounts)[getRecentPerformanceSamples](https://solana.com/docs/rpc/http/getrecentperformancesamples)[getRecentPrioritizationFees](https://solana.com/docs/rpc/http/getrecentprioritizationfees)[getSignaturesForAddress](https://solana.com/docs/rpc/http/getsignaturesforaddress)[getSignatureStatuses](https://solana.com/docs/rpc/http/getsignaturestatuses)[getSlot](https://solana.com/docs/rpc/http/getslot)[getSlotLeader](https://solana.com/docs/rpc/http/getslotleader)[getSlotLeaders](https://solana.com/docs/rpc/http/getslotleaders)[getStakeMinimumDelegation](https://solana.com/docs/rpc/http/getstakeminimumdelegation)[getSupply](https://solana.com/docs/rpc/http/getsupply)[getTokenAccountBalance](https://solana.com/docs/rpc/http/gettokenaccountbalance)[getTokenAccountsByDelegate](https://solana.com/docs/rpc/http/gettokenaccountsbydelegate)[getTokenAccountsByOwner](https://solana.com/docs/rpc/http/gettokenaccountsbyowner)[getTokenLargestAccounts](https://solana.com/docs/rpc/http/gettokenlargestaccounts)[getTokenSupply](https://solana.com/docs/rpc/http/gettokensupply)[getTransaction](https://solana.com/docs/rpc/http/gettransaction)[getTransactionCount](https://solana.com/docs/rpc/http/gettransactioncount)[getVersion](https://solana.com/docs/rpc/http/getversion)[getVoteAccounts](https://solana.com/docs/rpc/http/getvoteaccounts)[isBlockhashValid](https://solana.com/docs/rpc/http/isblockhashvalid)[minimumLedgerSlot](https://solana.com/docs/rpc/http/minimumledgerslot)[requestAirdrop](https://solana.com/docs/rpc/http/requestairdrop)[sendTransaction](https://solana.com/docs/rpc/http/sendtransaction)[simulateTransaction](https://solana.com/docs/rpc/http/simulatetransaction)\n[Websocket Methods](https://solana.com/docs/rpc/websocket)\nDeprecated Methods\nConfiguring State Commitment\n[Solana Documentation](https://solana.com/docs)\n# [Solana RPC Methods & Documentation](https://solana.com/docs/rpc)\nInteract with Solana nodes directly with the JSON RPC API via the HTTP and Websocket methods.\n## [Configuring State Commitment](https://solana.com/docs/rpc#configuring-state-commitment)\nFor preflight checks and transaction processing, Solana nodes choose which bank state to query based on a commitment requirement set by the client. The commitment describes how finalized a block is at that point in time. When querying the ledger state, it's recommended to use lower levels of commitment to report progress and higher levels to ensure the state will not be rolled back.\nIn descending order of commitment (most finalized to least finalized), clients may specify:\n  * `finalized` - the node will query the most recent block confirmed by supermajority of the cluster as having reached maximum lockout, meaning the cluster has recognized this block as finalized\n  * `confirmed` - the node will query the most recent block that has been voted on by supermajority of the cluster.\n    * It incorporates votes from gossip and replay.\n    * It does not count votes on descendants of a block, only direct votes on that block.\n    * This confirmation level also upholds \"optimistic confirmation\" guarantees in release 1.3 and onwards.\n  * `processed` - the node will query its most recent block. Note that the block may still be skipped by the cluster.\n\n\nFor processing many dependent transactions in series, it's recommended to use `confirmed` commitment, which balances speed with rollback safety. For total safety, it's recommended to use `finalized` commitment.\n### [Default Commitment](https://solana.com/docs/rpc#default-commitment)\nIf commitment configuration is not provided, the node will [default to `finalized` commitment](https://github.com/anza-xyz/agave/blob/aa0922d6845e119ba466f88497e8209d1c82febc/sdk/src/commitment_config.rs#L199-L203)\nOnly methods that query bank state accept the commitment parameter. They are indicated in the API Reference below.\n## [RpcResponse Structure](https://solana.com/docs/rpc#rpcresponse-structure)\nMany methods that take a commitment parameter return an RpcResponse JSON object comprised of two parts:\n  * `context` : An RpcResponseContext JSON structure including a `slot` field at which the operation was evaluated.\n  * `value` : The value returned by the operation itself.\n\n\n## [Parsed Responses](https://solana.com/docs/rpc#parsed-responses)\nSome methods support an `encoding` parameter, and can return account or instruction data in parsed JSON format if `\"encoding\":\"jsonParsed\"` is requested and the node has a parser for the owning program. Solana nodes currently support JSON parsing for the following native and SPL programs:\nProgram | Account State | Instructions  \n---|---|---  \nAddress Lookup | v1.15.0 | v1.15.0  \nBPF Loader | n/a | stable  \nBPF Upgradeable Loader | stable | stable  \nConfig | stable |   \nSPL Associated Token Account | n/a | stable  \nSPL Memo | n/a | stable  \nSPL Token | stable | stable  \nSPL Token 2022 | stable | stable  \nStake | stable | stable  \nVote | stable | stable  \nThe list of account parsers can be found [here](https://github.com/solana-labs/solana/blob/master/account-decoder/src/parse_account_data.rs), and instruction parsers [here](https://github.com/solana-labs/solana/blob/master/transaction-status/src/parse_instruction.rs).\n## [Filter criteria](https://solana.com/docs/rpc#filter-criteria)\nSome methods support providing a `filters` object to enable pre-filtering the data returned within the RpcResponse JSON object. The following filters exist:\n  * `memcmp: object` - compares a provided series of bytes with program account data at a particular offset. Fields:\n    * `offset: usize` - offset into program account data to start comparison\n    * `bytes: string` - data to match, as encoded string\n    * `encoding: string` - encoding for filter `bytes` data, either \"base58\" or \"base64\". Data is limited in size to 128 or fewer decoded bytes.  \n**NEW: This field, and base64 support generally, is only available in solana-core v1.14.0 or newer. Please omit when querying nodes on earlier versions**\n  * `dataSize: u64` - compares the program account data length with the provided data size\n\n\nIs this page helpful?\n[Previous Terminology](https://solana.com/docs/references/terminology)[Next Data Structures as JSON](https://solana.com/docs/rpc/json-structures)\n[Configuring State Commitment](https://solana.com/docs/rpc#configuring-state-commitment)[Default Commitment](https://solana.com/docs/rpc#default-commitment)[RpcResponse Structure](https://solana.com/docs/rpc#rpcresponse-structure)[Parsed Responses](https://solana.com/docs/rpc#parsed-responses)[Filter criteria](https://solana.com/docs/rpc#filter-criteria)\n[Edit Page](https://github.com/solana-foundation/solana-com/blob/main/apps/web/content/docs/en/rpc/index.mdx)\nManaged by\n[](https://solana.com/)\n[](https://solana.com/youtube)[](https://solana.com/twitter)[](https://solana.com/discord)[](https://solana.com/reddit)[](https://solana.com/github)[](https://solana.com/telegram)\n© 2025 Solana Foundation. All rights reserved.\nSolana\n  * [Grants](https://solana.org/grants)\n  * [Break Solana](https://break.solana.com/)\n  * [Media Kit](https://solana.com/branding)\n  * [Careers](https://jobs.solana.com/)\n  * [Disclaimer](https://solana.com/tos)\n  * [Privacy Policy](https://solana.com/privacy-policy)\n\n\nGet Connected\n  * [Blog](https://solana.com/news)\n  * [Newsletter](https://solana.com/newsletter)\n\n\nen\n© 2025 Solana Foundation. All rights reserved.\nSolana RPC Methods: HTTP & Websockets | Solana\n",
      "wordCount": 716,
      "title": "Solana RPC Methods: HTTP & Websockets | Solana"
    },
    {
      "url": "https://solana.com/developers/cookbook",
      "content": "[Crypto's biggest startup competition is so back. Sign up now for the Solana Cypherpunk Hackathon](https://colosseum.com/cypherpunk)\nThis website uses cookies to offer you a better browsing experience. Find out more on how we use cookies.\nOpt-out[Details](https://solana.com/privacy-policy#collection-of-information)\nAccept\n[](https://solana.com/)\n  * Learn\n  * Developers\n  * Solutions\n  * Network\n  * Community\n\n\nSearch\n[Documentation](https://solana.com/docs)[API](https://solana.com/docs/rpc)[Cookbook](https://solana.com/developers/cookbook)[Get Support](https://solana.stackexchange.com/)\nDevelopment\nWallets\nTransactions\nAccounts\nTokens\n[Solana Cookbook](https://solana.com/docs)\n# [Solana Cookbook](https://solana.com/developers/cookbook)\nThe Solana Cookbook is a developer resource that provides examples and references for building applications on Solana. Each example and reference will focus on specific aspects of Solana development while providing additional details and usage examples.\n## [Development Guides](https://solana.com/developers/cookbook#development-guides)\nDevelopment guides help developers set up and interact with the Solana ecosystem using various tools and clients.\nGuide | Client | Description  \n---|---|---  \n[How to Start a Local Validator](https://solana.com/developers/cookbook/development/start-local-validator) | Solana CLI | Set up and run a local Solana validator  \n[Connecting to a Solana Environment](https://solana.com/developers/cookbook/development/connect-environment) | JavaScript, Python | Connect to different Solana networks  \n[Getting Test SOL](https://solana.com/developers/cookbook/development/test-sol) | JavaScript, Python | Obtain SOL tokens for testing  \n[Subscribing to Events](https://solana.com/developers/cookbook/development/subscribing-events) | JavaScript, Python | Listen to Solana program events  \n[Using Mainnet Accounts and Programs](https://solana.com/developers/cookbook/development/using-mainnet-accounts-programs) | Solana CLI | Work with production accounts and programs  \n## [Wallet Management](https://solana.com/developers/cookbook#wallet-management)\nLearn how to create, restore, and manage Solana wallets using various tools and libraries.\nGuide | Client | Description  \n---|---|---  \n[How to Create a Keypair](https://solana.com/developers/cookbook/wallets/create-keypair) | JavaScript, Python | Generate new Solana keypairs  \n[How to Restore a Keypair](https://solana.com/developers/cookbook/wallets/restore-keypair) | JavaScript, Python | Recover existing keypairs  \n[How to Verify a Keypair](https://solana.com/developers/cookbook/wallets/verify-keypair) | JavaScript, Python | Validate keypair authenticity  \n[How to Validate a Public Key](https://solana.com/developers/cookbook/wallets/check-publickey) | JavaScript, Python | Check public key validity  \n[How to Generate Mnemonics for Keypairs](https://solana.com/developers/cookbook/wallets/generate-mnemonic) | bip39 | Create seed phrases  \n[How to Restore a Keypair from a Mnemonic](https://solana.com/developers/cookbook/wallets/restore-from-mnemonic) | JavaScript, bip39 | Recover keypairs using seed phrases  \n[How to Generate a Vanity Address](https://solana.com/developers/cookbook/wallets/generate-vanity-address) | Solana CLI | Create custom addresses  \n[How to Sign and Verify a Message](https://solana.com/developers/cookbook/wallets/sign-message) | JavaScript, Python | Message signing and verification  \n[How to Connect a Wallet with React](https://solana.com/developers/cookbook/wallets/connect-wallet-react) | React, JavaScript | Integrate wallets in React apps  \n## [Transaction Operations](https://solana.com/developers/cookbook#transaction-operations)\nExplore various transaction-related operations on the Solana blockchain.\nGuide | Client | Description  \n---|---|---  \n[How to Send SOL](https://solana.com/developers/cookbook/transactions/send-sol) | JavaScript, Python | Transfer SOL between accounts  \n[How to Send Tokens](https://solana.com/developers/cookbook/transactions/send-tokens) | JavaScript, Python | Transfer SPL tokens  \n[How to Calculate Transaction Cost](https://solana.com/developers/cookbook/transactions/calculate-cost) | JavaScript, Python | Estimate transaction fees  \n[How to Add a Memo to a Transaction](https://solana.com/developers/cookbook/transactions/add-memo) | JavaScript, Python | Include memos in transactions  \n[How to Add Priority Fees to a Transaction](https://solana.com/developers/cookbook/transactions/add-priority-fees) | JavaScript, Python | Set transaction priorities  \n[How to Optimize Compute Requested](https://solana.com/developers/cookbook/transactions/optimize-compute) | JavaScript, Python | Improve transaction efficiency  \n[Offline Transactions](https://solana.com/developers/cookbook/transactions/offline-transactions) | JavaScript, Python | Handle offline operations  \n## [Account Management](https://solana.com/developers/cookbook#account-management)\nLearn how to manage Solana accounts effectively.\nGuide | Client | Description  \n---|---|---  \n[How to Create an Account](https://solana.com/developers/cookbook/accounts/create-account) | JavaScript, Python | Create new Solana accounts  \n[How to Calculate Account Creation Cost](https://solana.com/developers/cookbook/accounts/calculate-rent) | JavaScript, Python | Estimate account costs  \n[How to Create a PDA's Account](https://solana.com/developers/cookbook/accounts/create-pda-account) | JavaScript, Rust | Work with PDAs  \n[How to Sign with a PDA's Account](https://solana.com/developers/cookbook/accounts/sign-with-pda) | Rust | PDA signing operations  \n[How to Close an Account](https://solana.com/developers/cookbook/accounts/close-account) | Rust | Remove accounts  \n[How to Get Account Balance](https://solana.com/developers/cookbook/accounts/get-account-balance) | JavaScript, Python | Check account balances  \n## [Token Program Instructions](https://solana.com/developers/cookbook#token-program-instructions)\nRefer to the [Token Program](https://solana.com/docs/tokens/basics) section for code examples.\nIs this page helpful?\n[Next How to Start a Local Validator](https://solana.com/developers/cookbook/development/start-local-validator)\nManaged by\n[](https://solana.com/)\n[](https://solana.com/youtube)[](https://solana.com/twitter)[](https://solana.com/discord)[](https://solana.com/reddit)[](https://solana.com/github)[](https://solana.com/telegram)\n© 2025 Solana Foundation. All rights reserved.\nSolana\n  * [Grants](https://solana.org/grants)\n  * [Break Solana](https://break.solana.com/)\n  * [Media Kit](https://solana.com/branding)\n  * [Careers](https://jobs.solana.com/)\n  * [Disclaimer](https://solana.com/tos)\n  * [Privacy Policy](https://solana.com/privacy-policy)\n\n\nGet Connected\n  * [Blog](https://solana.com/news)\n  * [Newsletter](https://solana.com/newsletter)\n\n\nen\n© 2025 Solana Foundation. All rights reserved.\nSolana Cookbook - Code examples for Solana development | Solana\n",
      "wordCount": 609,
      "title": "Solana Cookbook - Code examples for Solana development | Solana"
    },
    {
      "url": "https://solana.com/docs/intro/installation",
      "content": "[Crypto's biggest startup competition is so back. Sign up now for the Solana Cypherpunk Hackathon](https://colosseum.com/cypherpunk)\nThis website uses cookies to offer you a better browsing experience. Find out more on how we use cookies.\nOpt-out[Details](https://solana.com/privacy-policy#collection-of-information)\nAccept\n[](https://solana.com/)\n  * Learn\n  * Developers\n  * Solutions\n  * Network\n  * Community\n\n\nSearch\n[Documentation](https://solana.com/docs)[API](https://solana.com/docs/rpc)[Cookbook](https://solana.com/developers/cookbook)[Get Support](https://solana.stackexchange.com/)\nGetting Started\n[Installation](https://solana.com/docs/intro/installation)\n[Install Dependencies](https://solana.com/docs/intro/installation/dependencies)[Solana CLI Basics](https://solana.com/docs/intro/installation/solana-cli-basics)[Anchor CLI Basics](https://solana.com/docs/intro/installation/anchor-cli-basics)\n[Quick Start](https://solana.com/docs/intro/quick-start)\n[Reading from Network](https://solana.com/docs/intro/quick-start/reading-from-network)[Writing to Network](https://solana.com/docs/intro/quick-start/writing-to-network)[Deploy a Program](https://solana.com/docs/intro/quick-start/deploying-programs)[Creating Deterministic Accounts](https://solana.com/docs/intro/quick-start/program-derived-address)[Composing Multiple Programs](https://solana.com/docs/intro/quick-start/cross-program-invocation)\n[Core Concepts](https://solana.com/docs/core)\n[Solana Account Model](https://solana.com/docs/core/accounts)[Transactions and Instructions](https://solana.com/docs/core/transactions)[Transaction Fees](https://solana.com/docs/core/fees)[Programs on Solana](https://solana.com/docs/core/programs)[Program Derived Address](https://solana.com/docs/core/pda)[Cross Program Invocation](https://solana.com/docs/core/cpi)\n[Tokens on Solana](https://solana.com/docs/tokens)\n[Basics](https://solana.com/docs/tokens/basics)\n[Extensions](https://solana.com/docs/tokens/extensions)\nDeveloping Programs\nFrontend\nSolana SDKs\nReferences\nPrerequisites\n[Solana Documentation](https://solana.com/docs)Getting Started\n# [Quick Installation](https://solana.com/docs/intro/installation)\nA quick installation to set up your local Solana development environment with one command. Install Rust, the Solana CLI, and Anchor Framework on Windows (WSL), Linux, and Mac. (If preferred, you may [install each dependency individually](https://solana.com/docs/intro/installation/dependencies).)\n## [Prerequisites](https://solana.com/docs/intro/installation#prerequisites)\n## [Installation](https://solana.com/docs/intro/installation#installation)\n  1. Enter the following command into your terminal to install all the necessary dependencies:\n\n\nTerminal\n```\n\n\n$ \ncurl --proto '=https' --tlsv1.2 -sSfL https://solana-install.solana.workers.dev | bash\nCopy\n\n\n```\n\nA successful installation will return output like the following:\n```\n\n\n\n\nInstalled Versions:\n\n\n\n\nRust: rustc 1.86.0 (05f9846f8 2025-03-31)\n\n\n\n\nSolana CLI: solana-cli 2.2.12 (src:0315eb6a; feat:1522022101, client:Agave)\n\n\n\n\nAnchor CLI: anchor-cli 0.31.1\n\n\n\n\nNode.js: v23.11.0\n\n\n\nYarn: 1.22.1\n\n\n\n```\n\n  1. Verify a successful installation by checking the version of each installed dependency.\n\n\nTerminal\n```\n\n\n$ \nrustc --version && solana --version && anchor --version && node --version && yarn --version\nCopy\n\n\n```\n\nIf the quick installation command fails, please refer to the [Install Dependencies](https://solana.com/docs/intro/installation/dependencies) section below for instructions to install each dependency individually.\n### [Next steps](https://solana.com/docs/intro/installation#next-steps)\nOnce you have installed all the necessary dependencies, you are ready to review the [Solana CLI Basics](https://solana.com/docs/intro/installation/solana-cli-basics) and [Anchor CLI Basics](https://solana.com/docs/intro/installation/anchor-cli-basics).\nIs this page helpful?\n[Next Install Dependencies](https://solana.com/docs/intro/installation/dependencies)\n[Prerequisites](https://solana.com/docs/intro/installation#prerequisites)[Installation](https://solana.com/docs/intro/installation#installation)[Next steps](https://solana.com/docs/intro/installation#next-steps)\n[Edit Page](https://github.com/solana-foundation/solana-com/blob/main/apps/web/content/docs/en/intro/installation/index.mdx)\nManaged by\n[](https://solana.com/)\n[](https://solana.com/youtube)[](https://solana.com/twitter)[](https://solana.com/discord)[](https://solana.com/reddit)[](https://solana.com/github)[](https://solana.com/telegram)\n© 2025 Solana Foundation. All rights reserved.\nSolana\n  * [Grants](https://solana.org/grants)\n  * [Break Solana](https://break.solana.com/)\n  * [Media Kit](https://solana.com/branding)\n  * [Careers](https://jobs.solana.com/)\n  * [Disclaimer](https://solana.com/tos)\n  * [Privacy Policy](https://solana.com/privacy-policy)\n\n\nGet Connected\n  * [Blog](https://solana.com/news)\n  * [Newsletter](https://solana.com/newsletter)\n\n\nen\n© 2025 Solana Foundation. All rights reserved.\nInstall the Solana CLI and Anchor with one command | Solana\n",
      "wordCount": 344,
      "title": "Install the Solana CLI and Anchor with one command | Solana"
    },
    {
      "url": "https://solana.com/docs/intro/quick-start",
      "content": "[Crypto's biggest startup competition is so back. Sign up now for the Solana Cypherpunk Hackathon](https://colosseum.com/cypherpunk)\nThis website uses cookies to offer you a better browsing experience. Find out more on how we use cookies.\nOpt-out[Details](https://solana.com/privacy-policy#collection-of-information)\nAccept\n[](https://solana.com/)\n  * Learn\n  * Developers\n  * Solutions\n  * Network\n  * Community\n\n\nSearch\n[Documentation](https://solana.com/docs)[API](https://solana.com/docs/rpc)[Cookbook](https://solana.com/developers/cookbook)[Get Support](https://solana.stackexchange.com/)\nGetting Started\n[Installation](https://solana.com/docs/intro/installation)\n[Quick Start](https://solana.com/docs/intro/quick-start)\n[Reading from Network](https://solana.com/docs/intro/quick-start/reading-from-network)[Writing to Network](https://solana.com/docs/intro/quick-start/writing-to-network)[Deploy a Program](https://solana.com/docs/intro/quick-start/deploying-programs)[Creating Deterministic Accounts](https://solana.com/docs/intro/quick-start/program-derived-address)[Composing Multiple Programs](https://solana.com/docs/intro/quick-start/cross-program-invocation)\n[Core Concepts](https://solana.com/docs/core)\n[Solana Account Model](https://solana.com/docs/core/accounts)[Transactions and Instructions](https://solana.com/docs/core/transactions)[Transaction Fees](https://solana.com/docs/core/fees)[Programs on Solana](https://solana.com/docs/core/programs)[Program Derived Address](https://solana.com/docs/core/pda)[Cross Program Invocation](https://solana.com/docs/core/cpi)\n[Tokens on Solana](https://solana.com/docs/tokens)\n[Basics](https://solana.com/docs/tokens/basics)\n[Extensions](https://solana.com/docs/tokens/extensions)\nDeveloping Programs\nFrontend\nSolana SDKs\nReferences\nThe Solana Playground\n[Solana Documentation](https://solana.com/docs)Getting Started\n# [Quick Start](https://solana.com/docs/intro/quick-start)\nWelcome to the Solana quick start guide! This hands-on guide will introduce you to the **Solana Playground** (Solpg), where you can learn core-concepts, regardless of your prior experience. In this tutorial, you will learn about:\n  * **Solana Accounts** : How the Solana network stores data\n  * **Sending Transactions** : How to interact with the Solana network by sending transactions\n  * **Building and Deploying Programs** : Create your first Solana program and deploy it to the network\n  * **Program Derived Addresses (PDAs)** : Learn how to use PDAs to create deterministic addresses for accounts\n  * **Cross-Program Invocations (CPIs)** : Learn how to call other programs from within your program, enabling complex interactions and composability between different programs on Solana\n\n\n## [The Solana Playground](https://solana.com/docs/intro/quick-start#the-solana-playground)\nThe Solana Playground is a browser-based development environment that allows you to develop, deploy, and test Solana programs without installing anything locally. Follow along, copy, and paste code, and see results immediately. Basic programming knowledge helps but is not required. Time to dive in and start building with Solana!\nAs a new user, the first step to interacting with the Solana Playground is to create a Playground [wallet](https://solana.com/docs/references/terminology#wallet) and add [SOL](https://solana.com/docs/references/terminology#sol). This wallet will allow you to interact with the Solana network directly from your browser.\n## [Create a Playground Wallet](https://solana.com/docs/intro/quick-start#create-a-playground-wallet)\n### [Navigate to the Solana Playground](https://solana.com/docs/intro/quick-start#navigate-to-the-solana-playground)\nUsing your web browser, navigate to the [Solana Playground](https://beta.solpg.io/).\n### [Connect to the Playground](https://solana.com/docs/intro/quick-start#connect-to-the-playground)\nClick the 🔴 **Not connected** text at the bottom left corner of the screen.\n![Not Connected](https://solana.com/assets/docs/intro/quickstart/pg-not-connected.png)Not Connected\n### [Save your Keypair](https://solana.com/docs/intro/quick-start#save-your-keypair)\nClick **Save keypair** to save your key pair locally. When you're ready, click **Continue**.\n![Create Playground Wallet](https://solana.com/assets/docs/intro/quickstart/pg-create-wallet.png)Create Playground Wallet\nAt the bottom of the screen, you will see that you are now connected to the Playground wallet. You will also see the [connected cluster](https://solana.com/docs/references/terminology#connected-cluster) (`devnet`), the [wallet address](https://solana.com/docs/references/terminology#wallet-address), and your [SOL](https://solana.com/docs/references/terminology#sol) balance.\n![Connected](https://solana.com/assets/docs/intro/quickstart/pg-connected.png)Connected\nYour browser's local storage saves your Playground wallet. Clearing your browser cache will remove your saved wallet.\nUse your Playground wallet for testing and development only. Never send real assets (from [`mainnet`](https://solana.com/docs/references/terminology#connected-cluster)) to this address.\nCongratulations! You created your first Solana Wallet. You are now ready to add SOL to your wallet.\n### [Add SOL to Your Wallet](https://solana.com/docs/intro/quick-start#add-sol-to-your-wallet)\nBefore starting development, you need to add devnet SOL to your wallet. As a developer, SOL is used for two main use cases:\n  * To create new accounts for storing data or deploying programs\n  * Paying transaction fees when interacting with the Solana network\n\n\nYou can add devnet SOL to your wallet using the Playground terminal or with the Devnet Faucet. Each option is described below:\n#### [Option 1: Use the Playground Terminal](https://solana.com/docs/intro/quick-start#option-1-use-the-playground-terminal)\nRun the following command in the Playground terminal:\nTerminal\n```\n\n\n$ \nsolana airdrop 5\nCopy\n\n\n```\n\n#### [Option 2: Use the Devnet Faucet](https://solana.com/docs/intro/quick-start#option-2-use-the-devnet-faucet)\nIf option 1 fails, due to rate limits or other errors, use Solana's [Web Faucet](https://faucet.solana.com/).\n  * Enter your wallet address\n  * Select an amount\n  * Click **Confirm Airdrop**\n\n\n![Faucet Airdrop](https://solana.com/assets/docs/intro/quickstart/faucet-airdrop.gif)Faucet Airdrop\n## [Next Steps](https://solana.com/docs/intro/quick-start#next-steps)\nNow that you have created a Playground wallet and added Devnet SOL, you are ready to [read from the Solana network](https://solana.com/docs/intro/quick-start/reading-from-network).\nIs this page helpful?\n[Previous Anchor CLI Basics](https://solana.com/docs/intro/installation/anchor-cli-basics)[Next Reading from Network](https://solana.com/docs/intro/quick-start/reading-from-network)\n[The Solana Playground](https://solana.com/docs/intro/quick-start#the-solana-playground)[Create a Playground Wallet](https://solana.com/docs/intro/quick-start#create-a-playground-wallet)[Navigate to the Solana Playground](https://solana.com/docs/intro/quick-start#navigate-to-the-solana-playground)[Connect to the Playground](https://solana.com/docs/intro/quick-start#connect-to-the-playground)[Save your Keypair](https://solana.com/docs/intro/quick-start#save-your-keypair)[Add SOL to Your Wallet](https://solana.com/docs/intro/quick-start#add-sol-to-your-wallet)[Option 1: Use the Playground Terminal](https://solana.com/docs/intro/quick-start#option-1-use-the-playground-terminal)[Option 2: Use the Devnet Faucet](https://solana.com/docs/intro/quick-start#option-2-use-the-devnet-faucet)[Next Steps](https://solana.com/docs/intro/quick-start#next-steps)\n[Edit Page](https://github.com/solana-foundation/solana-com/blob/main/apps/web/content/docs/en/intro/quick-start/index.mdx)\nManaged by\n[](https://solana.com/)\n[](https://solana.com/youtube)[](https://solana.com/twitter)[](https://solana.com/discord)[](https://solana.com/reddit)[](https://solana.com/github)[](https://solana.com/telegram)\n© 2025 Solana Foundation. All rights reserved.\nSolana\n  * [Grants](https://solana.org/grants)\n  * [Break Solana](https://break.solana.com/)\n  * [Media Kit](https://solana.com/branding)\n  * [Careers](https://jobs.solana.com/)\n  * [Disclaimer](https://solana.com/tos)\n  * [Privacy Policy](https://solana.com/privacy-policy)\n\n\nGet Connected\n  * [Blog](https://solana.com/news)\n  * [Newsletter](https://solana.com/newsletter)\n\n\nen\n© 2025 Solana Foundation. All rights reserved.\nQuick Start | Solana\n",
      "wordCount": 704,
      "title": "Quick Start | Solana"
    },
    {
      "url": "https://solana.com/docs/intro/quick-start/reading-from-network",
      "content": "[Crypto's biggest startup competition is so back. Sign up now for the Solana Cypherpunk Hackathon](https://colosseum.com/cypherpunk)\nThis website uses cookies to offer you a better browsing experience. Find out more on how we use cookies.\nOpt-out[Details](https://solana.com/privacy-policy#collection-of-information)\nAccept\n[](https://solana.com/)\n  * Learn\n  * Developers\n  * Solutions\n  * Network\n  * Community\n\n\nSearch\n[Documentation](https://solana.com/docs)[API](https://solana.com/docs/rpc)[Cookbook](https://solana.com/developers/cookbook)[Get Support](https://solana.stackexchange.com/)\nGetting Started\n[Installation](https://solana.com/docs/intro/installation)\n[Quick Start](https://solana.com/docs/intro/quick-start)\n[Reading from Network](https://solana.com/docs/intro/quick-start/reading-from-network)[Writing to Network](https://solana.com/docs/intro/quick-start/writing-to-network)[Deploy a Program](https://solana.com/docs/intro/quick-start/deploying-programs)[Creating Deterministic Accounts](https://solana.com/docs/intro/quick-start/program-derived-address)[Composing Multiple Programs](https://solana.com/docs/intro/quick-start/cross-program-invocation)\n[Core Concepts](https://solana.com/docs/core)\n[Solana Account Model](https://solana.com/docs/core/accounts)[Transactions and Instructions](https://solana.com/docs/core/transactions)[Transaction Fees](https://solana.com/docs/core/fees)[Programs on Solana](https://solana.com/docs/core/programs)[Program Derived Address](https://solana.com/docs/core/pda)[Cross Program Invocation](https://solana.com/docs/core/cpi)\n[Tokens on Solana](https://solana.com/docs/tokens)\n[Basics](https://solana.com/docs/tokens/basics)\n[Extensions](https://solana.com/docs/tokens/extensions)\nDeveloping Programs\nFrontend\nSolana SDKs\nReferences\nFetch Wallet Account\n[Solana Documentation](https://solana.com/docs)Getting Started[Quick Start](https://solana.com/docs/intro/quick-start)\n# [Reading from Network](https://solana.com/docs/intro/quick-start/reading-from-network)\nThis section explores how to read data from the Solana network by fetching different accounts to understand the structure of a Solana account.\nOn Solana, all data exists in \"accounts\". You can think of data on Solana as a public database with a single \"Accounts\" table, where each entry is an account with the same base [Account type](https://github.com/anza-xyz/agave/blob/v2.1.11/sdk/account/src/lib.rs#L48-L60).\nBase Account Type\n```\n\n\n\n\n#[derive(PartialEq, Eq, Clone, Default)]\n\n\n\n\npub struct Account {\n\n\n\n    /// lamports in the account\n\n\n\n    pub lamports: u64,\n\n\n\n    /// data held in this account\n\n\n\n    #[cfg_attr(feature = \"serde\", serde(with = \"serde_bytes\"))]\n\n\n\n    pub data: Vec<u8>,\n\n\n\n    /// the program that owns this account. If executable, the program that loads this account.\n\n\n\n    pub owner: Pubkey,\n\n\n\n    /// this account's data contains a loaded program (and is now read-only)\n\n\n\n    pub executable: bool,\n\n\n\n    /// the epoch at which this account will next owe rent\n\n\n\n    pub rent_epoch: Epoch,\n\n\n\n}\n\n\n\n```\n\n![Accounts](https://solana.com/assets/docs/core/accounts/accounts.png)Accounts\nAccounts on Solana can store \"state\" or \"executable\" programs. Each account has an \"address\" (public key) that serves as its unique ID used to locate its corresponding on-chain data.\nSolana accounts contain either:\n  * **State** : Data that is meant to be read from and persisted. For example, information about tokens, user data, or other data defined within a program.\n  * **Executable Programs** : Accounts containing the actual code of Solana programs. These accounts store instructions that users can invoke.\n\n\nThis separation of program code and program state is a key feature of Solana's Account Model. For more details, refer to the [Solana Account Model](https://solana.com/docs/core/accounts) page.\n## [Fetch Wallet Account](https://solana.com/docs/intro/quick-start/reading-from-network#fetch-wallet-account)\nThis example demonstrates how to:\n  1. Generate a new keypair (public/private key pair).\n  2. Request an airdrop of SOL to fund the new address.\n  3. Retrieve the account data for the funded address.\n\n\nOn Solana, funding a new address with SOL automatically creates an account owned by the System Program. All \"wallet\" accounts are simply System Program owned accounts that hold SOL and can sign transactions.\nFetch Account\n```\n\n\n\n\nimport { Keypair, Connection, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n\n\n\n\nconst keypair = Keypair.generate();\n\n\n\n\nconsole.log(`Public Key: ${keypair.publicKey}`);\n\n\n\n\nconst connection = new Connection(\"http://localhost:8899\", \"confirmed\");\n\n\n\n\n// Funding an address with SOL automatically creates an account\n\n\n\n\nconst signature = await connection.requestAirdrop(\n\n\n\n  keypair.publicKey,\n\n\n\n  LAMPORTS_PER_SOL\n\n\n\n\n);\n\n\n\n\nawait connection.confirmTransaction(signature, \"confirmed\");\n\n\n\n\nconst accountInfo = await connection.getAccountInfo(keypair.publicKey);\n\n\n\n\nconsole.log(JSON.stringify(accountInfo, null, 2));\n\n\n\n\n```\n\nConsole\nRunClick to execute the code.\nFetch Account\n```\n\n\n\n\nimport { Keypair, Connection, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n\n\n\n\nconst keypair = Keypair.generate();\n\n\n\n\nconsole.log(`Public Key: ${keypair.publicKey}`);\n\n\n\n\nconst connection = new Connection(\"http://localhost:8899\", \"confirmed\");\n\n\n\n\n// Funding an address with SOL automatically creates an account\n\n\n\n\nconst signature = await connection.requestAirdrop(\n\n\n\n  keypair.publicKey,\n\n\n\n  LAMPORTS_PER_SOL\n\n\n\n\n);\n\n\n\n\nawait connection.confirmTransaction(signature, \"confirmed\");\n\n\n\n\nconst accountInfo = await connection.getAccountInfo(keypair.publicKey);\n\n\n\n\nconsole.log(JSON.stringify(accountInfo, null, 2));\n\n\n\n\n```\n\nConsole\nRunClick to execute the code.\nA \"wallet\" on Solana is an account owned by the [System Program](https://github.com/anza-xyz/agave/tree/v2.1.11/programs/system), which is one of Solana’s built-in programs. Wallet accounts are primarily used to hold SOL (tracked in the `lamports` field) and to sign transactions.\nWhen you fetch a wallet account, the response includes the fields shown in the example output.\nExample Output\n```\n\n\n\n\n{\n\n\n\n  \"data\": {\n\n\n\n    \"type\": \"Buffer\",\n\n\n\n    \"data\": []\n\n\n\n  },\n\n\n\n  \"executable\": false,\n\n\n\n  \"lamports\": 1000000000,\n\n\n\n  \"owner\": \"11111111111111111111111111111111\",\n\n\n\n  \"rentEpoch\": 0,\n\n\n\n  \"space\": 0\n\n\n\n}\n\n\n\n```\n\nThe `data` field contains the account's data stored as bytes.\nFor wallet accounts, this field is empty (0 bytes). Other accounts use this field to store either program state or executable program code.\nExample Output\n```\n\n\n\n\n{\n\n\n\n  \"data\": {\n\n\n\n    \"type\": \"Buffer\",\n\n\n\n    \"data\": []\n\n\n\n  },\n\n\n\n  \"executable\": false,\n\n\n\n  \"lamports\": 1000000000,\n\n\n\n  \"owner\": \"11111111111111111111111111111111\",\n\n\n\n  \"rentEpoch\": 0,\n\n\n\n  \"space\": 0\n\n\n\n}\n\n\n\n```\n\nThe `executable` field indicates if the account's `data` field contains executable program code.\nFor wallet and accounts that store program state, this field is `false`.\nExample Output\n```\n\n\n\n\n{\n\n\n\n  \"data\": {\n\n\n\n    \"type\": \"Buffer\",\n\n\n\n    \"data\": []\n\n\n\n  },\n\n\n\n  \"executable\": false,\n\n\n\n  \"lamports\": 1000000000,\n\n\n\n  \"owner\": \"11111111111111111111111111111111\",\n\n\n\n  \"rentEpoch\": 0,\n\n\n\n  \"space\": 0\n\n\n\n}\n\n\n\n```\n\nThe `lamports` field contains the account's SOL balance, denominated in lamports.\nLamports are the smallest unit of SOL. 1 SOL = 1,000,000,000 lamports.\nExample Output\n```\n\n\n\n\n{\n\n\n\n  \"data\": {\n\n\n\n    \"type\": \"Buffer\",\n\n\n\n    \"data\": []\n\n\n\n  },\n\n\n\n  \"executable\": false,\n\n\n\n  \"lamports\": 1000000000,\n\n\n\n  \"owner\": \"11111111111111111111111111111111\",\n\n\n\n  \"rentEpoch\": 0,\n\n\n\n  \"space\": 0\n\n\n\n}\n\n\n\n```\n\nThe `owner` field shows the program that owns the account.\nFor wallets, the owner is always the System Program, with the address `11111111111111111111111111111111`.\nExample Output\n```\n\n\n\n\n{\n\n\n\n  \"data\": {\n\n\n\n    \"type\": \"Buffer\",\n\n\n\n    \"data\": []\n\n\n\n  },\n\n\n\n  \"executable\": false,\n\n\n\n  \"lamports\": 1000000000,\n\n\n\n  \"owner\": \"11111111111111111111111111111111\",\n\n\n\n  \"rentEpoch\": 0,\n\n\n\n  \"space\": 0\n\n\n\n}\n\n\n\n```\n\nThe `rentEpoch` field is a legacy field from a deprecated mechanism where accounts were charged \"rent\" (in lamports) to maintain its data on the network.\nThis field is currently unused, but is included for backwards compatibility.\nExample Output\n```\n\n\n\n\n{\n\n\n\n  \"data\": {\n\n\n\n    \"type\": \"Buffer\",\n\n\n\n    \"data\": []\n\n\n\n  },\n\n\n\n  \"executable\": false,\n\n\n\n  \"lamports\": 1000000000,\n\n\n\n  \"owner\": \"11111111111111111111111111111111\",\n\n\n\n  \"rentEpoch\": 0,\n\n\n\n  \"space\": 0\n\n\n\n}\n\n\n\n```\n\nThe `space` field shows the number of bytes in the `data` field. This is not a field in the `Account` type itself, but included in the response.\nIn this example, the `space` field is 0 because the `data` field contains 0 bytes of data.\nExample Output\n```\n\n\n\n\n{\n\n\n\n  \"data\": {\n\n\n\n    \"type\": \"Buffer\",\n\n\n\n    \"data\": []\n\n\n\n  },\n\n\n\n  \"executable\": false,\n\n\n\n  \"lamports\": 1000000000,\n\n\n\n  \"owner\": \"11111111111111111111111111111111\",\n\n\n\n  \"rentEpoch\": 0,\n\n\n\n  \"space\": 0\n\n\n\n}\n\n\n\n```\n\nA \"wallet\" on Solana is an account owned by the [System Program](https://github.com/anza-xyz/agave/tree/v2.1.11/programs/system), which is one of Solana’s built-in programs. Wallet accounts are primarily used to hold SOL (tracked in the `lamports` field) and to sign transactions.\nWhen you fetch a wallet account, the response includes the fields shown in the example output.\nThe `data` field contains the account's data stored as bytes.\nFor wallet accounts, this field is empty (0 bytes). Other accounts use this field to store either program state or executable program code.\nThe `executable` field indicates if the account's `data` field contains executable program code.\nFor wallet and accounts that store program state, this field is `false`.\nThe `lamports` field contains the account's SOL balance, denominated in lamports.\nLamports are the smallest unit of SOL. 1 SOL = 1,000,000,000 lamports.\nThe `owner` field shows the program that owns the account.\nFor wallets, the owner is always the System Program, with the address `11111111111111111111111111111111`.\nThe `rentEpoch` field is a legacy field from a deprecated mechanism where accounts were charged \"rent\" (in lamports) to maintain its data on the network.\nThis field is currently unused, but is included for backwards compatibility.\nThe `space` field shows the number of bytes in the `data` field. This is not a field in the `Account` type itself, but included in the response.\nIn this example, the `space` field is 0 because the `data` field contains 0 bytes of data.\n```\n\n\n\n\n{\n\n\n\n  \"data\": {\n\n\n\n    \"type\": \"Buffer\",\n\n\n\n    \"data\": []\n\n\n\n  },\n\n\n\n  \"executable\": false,\n\n\n\n  \"lamports\": 1000000000,\n\n\n\n  \"owner\": \"11111111111111111111111111111111\",\n\n\n\n  \"rentEpoch\": 0,\n\n\n\n  \"space\": 0\n\n\n\n}\n\n\n\n```\n\n## [Fetch Token Program](https://solana.com/docs/intro/quick-start/reading-from-network#fetch-token-program)\nThis example fetches the Token Program to demonstrate the difference between wallet and program accounts.\nThe program account stores the compiled bytecode for the Token Program's [source code](https://github.com/solana-program/token/tree/main/program). You can view this program account on the [Solana Explorer](https://explorer.solana.com/address/TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA).\nFetch Program Account\n```\n\n\n\n\nimport { Connection, PublicKey } from \"@solana/web3.js\";\n\n\n\n\nconst connection = new Connection(\n\n\n\n  \"https://api.mainnet-beta.solana.com\",\n\n\n\n  \"confirmed\"\n\n\n\n\n);\n\n\n\n\nconst address = new PublicKey(\"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\");\n\n\n\n\nconst accountInfo = await connection.getAccountInfo(address);\n\n\n\n\nconsole.log(\n\n\n\n\n```\n\nConsole\nRunClick to execute the code.\nFetch Program Account\n```\n\n\n\n\nimport { Connection, PublicKey } from \"@solana/web3.js\";\n\n\n\n\nconst connection = new Connection(\n\n\n\n  \"https://api.mainnet-beta.solana.com\",\n\n\n\n  \"confirmed\"\n\n\n\n\n);\n\n\n\n\nconst address = new PublicKey(\"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\");\n\n\n\n\nconst accountInfo = await connection.getAccountInfo(address);\n\n\n\n\nconsole.log(\n\n\n\n\n```\n\nConsole\nRunClick to execute the code.\nThe Token Program is an executable program account on Solana. Like wallet accounts, programs have the same underlying [Account](https://github.com/anza-xyz/agave/blob/v2.1.11/sdk/account/src/lib.rs#L48-L60) data structure, but with key differences in its fields.\nToken Program Account\n```\n\n\n\n\n{\n\n\n\n  \"data\": {\n\n\n\n    \"type\": \"Buffer\",\n\n\n\n    \"data\": [127, \"...truncated, total bytes: 134080...\", 0]\n\n\n\n  },\n\n\n\n  \"executable\": true,\n\n\n\n  \"lamports\": 4522329612,\n\n\n\n  \"owner\": \"BPFLoader2111111111111111111111111111111111\",\n\n\n\n  \"rentEpoch\": 18446744073709552000,\n\n\n\n  \"space\": 134080\n\n\n\n}\n\n\n\n```\n\nThe `executable` field is set to `true`, indicating that this account's `data` field contains executable program code.\nToken Program Account\n```\n\n\n\n\n{\n\n\n\n  \"data\": {\n\n\n\n    \"type\": \"Buffer\",\n\n\n\n    \"data\": [127, \"...truncated, total bytes: 134080...\", 0]\n\n\n\n  },\n\n\n\n  \"executable\": true,\n\n\n\n  \"lamports\": 4522329612,\n\n\n\n  \"owner\": \"BPFLoader2111111111111111111111111111111111\",\n\n\n\n  \"rentEpoch\": 18446744073709552000,\n\n\n\n  \"space\": 134080\n\n\n\n}\n\n\n\n```\n\nFor program accounts, the `data` field stores the program's executable code. In contrast, wallet accounts have an empty data field.\nWhen you deploy a Solana program, the program's executable code is stored in an account's `data` field.\nToken Program Account\n```\n\n\n\n\n{\n\n\n\n  \"data\": {\n\n\n\n    \"type\": \"Buffer\",\n\n\n\n    \"data\": [127, \"...truncated, total bytes: 134080...\", 0]\n\n\n\n  },\n\n\n\n  \"executable\": true,\n\n\n\n  \"lamports\": 4522329612,\n\n\n\n  \"owner\": \"BPFLoader2111111111111111111111111111111111\",\n\n\n\n  \"rentEpoch\": 18446744073709552000,\n\n\n\n  \"space\": 134080\n\n\n\n}\n\n\n\n```\n\nExecutable program accounts also have a program designated as the `owner` of the account.\nAll program accounts are owned by a Loader program, which is a category of built-in programs that own executable program accounts on Solana.\nFor the Token Program, the `owner` is the BPFLoader2 program.\nToken Program Account\n```\n\n\n\n\n{\n\n\n\n  \"data\": {\n\n\n\n    \"type\": \"Buffer\",\n\n\n\n    \"data\": [127, \"...truncated, total bytes: 134080...\", 0]\n\n\n\n  },\n\n\n\n  \"executable\": true,\n\n\n\n  \"lamports\": 4522329612,\n\n\n\n  \"owner\": \"BPFLoader2111111111111111111111111111111111\",\n\n\n\n  \"rentEpoch\": 18446744073709552000,\n\n\n\n  \"space\": 134080\n\n\n\n}\n\n\n\n```\n\nThe Token Program is an executable program account on Solana. Like wallet accounts, programs have the same underlying [Account](https://github.com/anza-xyz/agave/blob/v2.1.11/sdk/account/src/lib.rs#L48-L60) data structure, but with key differences in its fields.\nThe `executable` field is set to `true`, indicating that this account's `data` field contains executable program code.\nFor program accounts, the `data` field stores the program's executable code. In contrast, wallet accounts have an empty data field.\nWhen you deploy a Solana program, the program's executable code is stored in an account's `data` field.\nExecutable program accounts also have a program designated as the `owner` of the account.\nAll program accounts are owned by a Loader program, which is a category of built-in programs that own executable program accounts on Solana.\nFor the Token Program, the `owner` is the BPFLoader2 program.\n```\n\n\n\n\n{\n\n\n\n  \"data\": {\n\n\n\n    \"type\": \"Buffer\",\n\n\n\n    \"data\": [127, \"...truncated, total bytes: 134080...\", 0]\n\n\n\n  },\n\n\n\n  \"executable\": true,\n\n\n\n  \"lamports\": 4522329612,\n\n\n\n  \"owner\": \"BPFLoader2111111111111111111111111111111111\",\n\n\n\n  \"rentEpoch\": 18446744073709552000,\n\n\n\n  \"space\": 134080\n\n\n\n}\n\n\n\n```\n\n## [Fetch Mint Account](https://solana.com/docs/intro/quick-start/reading-from-network#fetch-mint-account)\nThis example fetches the USD Coin (USDC) Mint account to show how programs on Solana store state in separate accounts.\nA [Mint](https://github.com/solana-program/token/blob/program%40v8.0.0/program/src/state.rs#L16-L30) account is an account owned by the Token Program. It stores global metadata for a specific token, including the total supply, number of decimals, and the accounts authorized to mint or freeze tokens. The Mint account's address uniquely identifies a token on the Solana network.\nFetch Program Account\n```\n\n\n\n\nimport { Connection, PublicKey } from \"@solana/web3.js\";\n\n\n\n\nconst connection = new Connection(\n\n\n\n  \"https://api.mainnet-beta.solana.com\",\n\n\n\n  \"confirmed\"\n\n\n\n\n);\n\n\n\n\nconst address = new PublicKey(\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\");\n\n\n\n\nconst accountInfo = await connection.getAccountInfo(address);\n\n\n\n\nconsole.log(\n\n\n\n\n```\n\nConsole\nRunClick to execute the code.\nFetch Program Account\n```\n\n\n\n\nimport { Connection, PublicKey } from \"@solana/web3.js\";\n\n\n\n\nconst connection = new Connection(\n\n\n\n  \"https://api.mainnet-beta.solana.com\",\n\n\n\n  \"confirmed\"\n\n\n\n\n);\n\n\n\n\nconst address = new PublicKey(\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\");\n\n\n\n\nconst accountInfo = await connection.getAccountInfo(address);\n\n\n\n\nconsole.log(\n\n\n\n\n```\n\nConsole\nRunClick to execute the code.\nThe key point to note in this example is that the Mint account stores state, not executable code.\nMint accounts are owned by the Token Program, which includes instructions that define how to create and update Mint accounts.\nMint Account\n```\n\n\n\n\n{\n\n\n\n  \"data\": {\n\n\n\n    \"type\": \"Buffer\",\n\n\n\n    \"data\": [1, \"...truncated, total bytes: 82...\", 103]\n\n\n\n  },\n\n\n\n  \"executable\": false,\n\n\n\n  \"lamports\": 407438077149,\n\n\n\n  \"owner\": \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\",\n\n\n\n  \"rentEpoch\": 18446744073709552000,\n\n\n\n  \"space\": 82\n\n\n\n}\n\n\n\n```\n\nThe `executable` field is `false` because the mint account's `data` field stores state, not executable code.\nThe Token Program defines the `Mint` data type, which is stored in the mint account's `data` field.\nMint Account\n```\n\n\n\n\n{\n\n\n\n  \"data\": {\n\n\n\n    \"type\": \"Buffer\",\n\n\n\n    \"data\": [1, \"...truncated, total bytes: 82...\", 103]\n\n\n\n  },\n\n\n\n  \"executable\": false,\n\n\n\n  \"lamports\": 407438077149,\n\n\n\n  \"owner\": \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\",\n\n\n\n  \"rentEpoch\": 18446744073709552000,\n\n\n\n  \"space\": 82\n\n\n\n}\n\n\n\n```\n\nThe `data` field contains the serialized `Mint` account state, such as the mint authority, total supply, number of decimals.\nTo read from a Mint account, you must deserialize the `data` field into the `Mint` data type. This is covered in the next step.\nMint Account\n```\n\n\n\n\n{\n\n\n\n  \"data\": {\n\n\n\n    \"type\": \"Buffer\",\n\n\n\n    \"data\": [1, \"...truncated, total bytes: 82...\", 103]\n\n\n\n  },\n\n\n\n  \"executable\": false,\n\n\n\n  \"lamports\": 407438077149,\n\n\n\n  \"owner\": \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\",\n\n\n\n  \"rentEpoch\": 18446744073709552000,\n\n\n\n  \"space\": 82\n\n\n\n}\n\n\n\n```\n\nThe Token Program (`TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`) owns the mint account.\nThis means that the mint account's `data` field can only be modified by the instructions defined in the Token Program.\nMint Account\n```\n\n\n\n\n{\n\n\n\n  \"data\": {\n\n\n\n    \"type\": \"Buffer\",\n\n\n\n    \"data\": [1, \"...truncated, total bytes: 82...\", 103]\n\n\n\n  },\n\n\n\n  \"executable\": false,\n\n\n\n  \"lamports\": 407438077149,\n\n\n\n  \"owner\": \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\",\n\n\n\n  \"rentEpoch\": 18446744073709552000,\n\n\n\n  \"space\": 82\n\n\n\n}\n\n\n\n```\n\nThe key point to note in this example is that the Mint account stores state, not executable code.\nMint accounts are owned by the Token Program, which includes instructions that define how to create and update Mint accounts.\nThe `executable` field is `false` because the mint account's `data` field stores state, not executable code.\nThe Token Program defines the `Mint` data type, which is stored in the mint account's `data` field.\nThe `data` field contains the serialized `Mint` account state, such as the mint authority, total supply, number of decimals.\nTo read from a Mint account, you must deserialize the `data` field into the `Mint` data type. This is covered in the next step.\nThe Token Program (`TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`) owns the mint account.\nThis means that the mint account's `data` field can only be modified by the instructions defined in the Token Program.\n```\n\n\n\n\n{\n\n\n\n  \"data\": {\n\n\n\n    \"type\": \"Buffer\",\n\n\n\n    \"data\": [1, \"...truncated, total bytes: 82...\", 103]\n\n\n\n  },\n\n\n\n  \"executable\": false,\n\n\n\n  \"lamports\": 407438077149,\n\n\n\n  \"owner\": \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\",\n\n\n\n  \"rentEpoch\": 18446744073709552000,\n\n\n\n  \"space\": 82\n\n\n\n}\n\n\n\n```\n\n## [Deserialize Mint Account](https://solana.com/docs/intro/quick-start/reading-from-network#deserialize-mint-account)\nThe `data` field of a Solana account contains raw bytes. To interpret this data meaningfully, you must deserialize it into the appropriate data type defined by the program that owns the account.\nMost Solana programs provide client libraries with helper functions that abstract away the deserialization process. These functions convert the raw account bytes into structured data types, making it easier to work with the account data.\nFor example, `@solana/spl-token` includes the `getMint()` function to help deserialize a Mint account's `data` field into the [Mint](https://github.com/solana-program/token/blob/program%40v8.0.0/program/src/state.rs#L16-L30) data type.\nDeserialize Mint Account Data\n```\n\n\n\n\nimport { PublicKey, Connection } from \"@solana/web3.js\";\n\n\n\n\nimport { getMint } from \"@solana/spl-token\";\n\n\n\n\nconst connection = new Connection(\n\n\n\n  \"https://api.mainnet-beta.solana.com\",\n\n\n\n  \"confirmed\"\n\n\n\n\n);\n\n\n\n\nconst address = new PublicKey(\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\");\n\n\n\n\nconst mintData = await getMint(connection, address, \"confirmed\");\n\n\n\n\nconsole.log(\n\n\n\n\n```\n\nConsole\nRunClick to execute the code.\nDeserialize Mint Account Data\n```\n\n\n\n\nimport { PublicKey, Connection } from \"@solana/web3.js\";\n\n\n\n\nimport { getMint } from \"@solana/spl-token\";\n\n\n\n\nconst connection = new Connection(\n\n\n\n  \"https://api.mainnet-beta.solana.com\",\n\n\n\n  \"confirmed\"\n\n\n\n\n);\n\n\n\n\nconst address = new PublicKey(\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\");\n\n\n\n\nconst mintData = await getMint(connection, address, \"confirmed\");\n\n\n\n\nconsole.log(\n\n\n\n\n```\n\nConsole\nRunClick to execute the code.\nMint Account Type\n```\n\n\n\n\npub struct Mint {\n\n\n\n    /// Optional authority used to mint new tokens. The mint authority may only\n\n\n\n    /// be provided during mint creation. If no mint authority is present\n\n\n\n    /// then the mint has a fixed supply and no further tokens may be\n\n\n\n    /// minted.\n\n\n\n    pub mint_authority: COption<Pubkey>,\n\n\n\n    /// Total supply of tokens.\n\n\n\n    pub supply: u64,\n\n\n\n    /// Number of base 10 digits to the right of the decimal place.\n\n\n\n    pub decimals: u8,\n\n\n\n    /// Is `true` if this structure has been initialized\n\n\n\n    pub is_initialized: bool,\n\n\n\n    /// Optional authority to freeze token accounts.\n\n\n\n    pub freeze_authority: COption<Pubkey>,\n\n\n\n}\n\n\n\n```\n\nThe `getMint()` function deserializes a mint account's `data` field into the [Mint](https://github.com/solana-program/token/blob/program%40v8.0.0/program/src/state.rs#L16-L30) data type defined by the Token Program.\nMint Account\n```\n\n\n\n\n{\n\n\n\n  \"data\": {\n\n\n\n    \"type\": \"Buffer\",\n\n\n\n    \"data\": [1, \"...truncated, total bytes: 82...\", 103]\n\n\n\n  },\n\n\n\n  \"executable\": false,\n\n\n\n  \"lamports\": 407438077149,\n\n\n\n  \"owner\": \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\",\n\n\n\n  \"rentEpoch\": 18446744073709552000,\n\n\n\n  \"space\": 82\n\n\n\n}\n\n\n\n```\n\nYou can view the fully deserialized [Mint Account](https://explorer.solana.com/address/EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v?cluster=mainnet-beta) data on the Solana Explorer.\nDeserialized Mint Data\n```\n\n\n\n\n{\n\n\n\n  \"address\": \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n\n\n\n  \"mintAuthority\": \"BJE5MMbqXjVwjAF7oxwPYXnTXDyspzZyt4vwenNw5ruG\",\n\n\n\n  \"supply\": \"8985397351591790\",\n\n\n\n  \"decimals\": 6,\n\n\n\n  \"isInitialized\": true,\n\n\n\n  \"freezeAuthority\": \"7dGbd2QZcCKcTndnHcTL8q7SMVXAkp688NTQYwrRCrar\",\n\n\n\n  \"tlvData\": {\n\n\n\n    \"type\": \"Buffer\",\n\n\n\n    \"data\": []\n\n\n\n  }\n\n\n\n}\n\n\n\n```\n\nThe `address` field contains the Mint account's address.\nThe mint account's address is used to identify the token on the Solana network.\nDeserialized Mint Data\n```\n\n\n\n\n{\n\n\n\n  \"address\": \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n\n\n\n  \"mintAuthority\": \"BJE5MMbqXjVwjAF7oxwPYXnTXDyspzZyt4vwenNw5ruG\",\n\n\n\n  \"supply\": \"8985397351591790\",\n\n\n\n  \"decimals\": 6,\n\n\n\n  \"isInitialized\": true,\n\n\n\n  \"freezeAuthority\": \"7dGbd2QZcCKcTndnHcTL8q7SMVXAkp688NTQYwrRCrar\",\n\n\n\n  \"tlvData\": {\n\n\n\n    \"type\": \"Buffer\",\n\n\n\n    \"data\": []\n\n\n\n  }\n\n\n\n}\n\n\n\n```\n\nThe `mintAuthority` field shows the authority allowed to mint new tokens.\nThis is the only account that can create new units of the token.\nDeserialized Mint Data\n```\n\n\n\n\n{\n\n\n\n  \"address\": \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n\n\n\n  \"mintAuthority\": \"BJE5MMbqXjVwjAF7oxwPYXnTXDyspzZyt4vwenNw5ruG\",\n\n\n\n  \"supply\": \"8985397351591790\",\n\n\n\n  \"decimals\": 6,\n\n\n\n  \"isInitialized\": true,\n\n\n\n  \"freezeAuthority\": \"7dGbd2QZcCKcTndnHcTL8q7SMVXAkp688NTQYwrRCrar\",\n\n\n\n  \"tlvData\": {\n\n\n\n    \"type\": \"Buffer\",\n\n\n\n    \"data\": []\n\n\n\n  }\n\n\n\n}\n\n\n\n```\n\nThe `supply` field shows the total number of tokens that have been minted.\nThis value is in the smallest unit of the token. To get the total supply in standard units, adjust the value of the `supply` field by the `decimals`.\nDeserialized Mint Data\n```\n\n\n\n\n{\n\n\n\n  \"address\": \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n\n\n\n  \"mintAuthority\": \"BJE5MMbqXjVwjAF7oxwPYXnTXDyspzZyt4vwenNw5ruG\",\n\n\n\n  \"supply\": \"8985397351591790\",\n\n\n\n  \"decimals\": 6,\n\n\n\n  \"isInitialized\": true,\n\n\n\n  \"freezeAuthority\": \"7dGbd2QZcCKcTndnHcTL8q7SMVXAkp688NTQYwrRCrar\",\n\n\n\n  \"tlvData\": {\n\n\n\n    \"type\": \"Buffer\",\n\n\n\n    \"data\": []\n\n\n\n  }\n\n\n\n}\n\n\n\n```\n\nThe `decimals` field shows the number of decimal places for the token.\nDeserialized Mint Data\n```\n\n\n\n\n{\n\n\n\n  \"address\": \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n\n\n\n  \"mintAuthority\": \"BJE5MMbqXjVwjAF7oxwPYXnTXDyspzZyt4vwenNw5ruG\",\n\n\n\n  \"supply\": \"8985397351591790\",\n\n\n\n  \"decimals\": 6,\n\n\n\n  \"isInitialized\": true,\n\n\n\n  \"freezeAuthority\": \"7dGbd2QZcCKcTndnHcTL8q7SMVXAkp688NTQYwrRCrar\",\n\n\n\n  \"tlvData\": {\n\n\n\n    \"type\": \"Buffer\",\n\n\n\n    \"data\": []\n\n\n\n  }\n\n\n\n}\n\n\n\n```\n\nThe `isInitialized` field indicates if the Mint account has been initialized. This field is a security check used in the Token Program.\nDeserialized Mint Data\n```\n\n\n\n\n{\n\n\n\n  \"address\": \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n\n\n\n  \"mintAuthority\": \"BJE5MMbqXjVwjAF7oxwPYXnTXDyspzZyt4vwenNw5ruG\",\n\n\n\n  \"supply\": \"8985397351591790\",\n\n\n\n  \"decimals\": 6,\n\n\n\n  \"isInitialized\": true,\n\n\n\n  \"freezeAuthority\": \"7dGbd2QZcCKcTndnHcTL8q7SMVXAkp688NTQYwrRCrar\",\n\n\n\n  \"tlvData\": {\n\n\n\n    \"type\": \"Buffer\",\n\n\n\n    \"data\": []\n\n\n\n  }\n\n\n\n}\n\n\n\n```\n\nThe `freezeAuthority` field shows the authority allowed to freeze token accounts.\nA token account that is frozen cannot transfer or burn the token in the account.\nDeserialized Mint Data\n```\n\n\n\n\n{\n\n\n\n  \"address\": \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n\n\n\n  \"mintAuthority\": \"BJE5MMbqXjVwjAF7oxwPYXnTXDyspzZyt4vwenNw5ruG\",\n\n\n\n  \"supply\": \"8985397351591790\",\n\n\n\n  \"decimals\": 6,\n\n\n\n  \"isInitialized\": true,\n\n\n\n  \"freezeAuthority\": \"7dGbd2QZcCKcTndnHcTL8q7SMVXAkp688NTQYwrRCrar\",\n\n\n\n  \"tlvData\": {\n\n\n\n    \"type\": \"Buffer\",\n\n\n\n    \"data\": []\n\n\n\n  }\n\n\n\n}\n\n\n\n```\n\nThe `tlvData` field contains extra data for Token Extensions (requires further deserialization).\nThis field is only relevant to accounts created by the Token Extension Program (Token2022).\nDeserialized Mint Data\n```\n\n\n\n\n{\n\n\n\n  \"address\": \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n\n\n\n  \"mintAuthority\": \"BJE5MMbqXjVwjAF7oxwPYXnTXDyspzZyt4vwenNw5ruG\",\n\n\n\n  \"supply\": \"8985397351591790\",\n\n\n\n  \"decimals\": 6,\n\n\n\n  \"isInitialized\": true,\n\n\n\n  \"freezeAuthority\": \"7dGbd2QZcCKcTndnHcTL8q7SMVXAkp688NTQYwrRCrar\",\n\n\n\n  \"tlvData\": {\n\n\n\n    \"type\": \"Buffer\",\n\n\n\n    \"data\": []\n\n\n\n  }\n\n\n\n}\n\n\n\n```\n\nThe `getMint()` function deserializes a mint account's `data` field into the [Mint](https://github.com/solana-program/token/blob/program%40v8.0.0/program/src/state.rs#L16-L30) data type defined by the Token Program.\nMint Account\n```\n\n\n\n\n{\n\n\n\n  \"data\": {\n\n\n\n    \"type\": \"Buffer\",\n\n\n\n    \"data\": [1, \"...truncated, total bytes: 82...\", 103]\n\n\n\n  },\n\n\n\n  \"executable\": false,\n\n\n\n  \"lamports\": 407438077149,\n\n\n\n  \"owner\": \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\",\n\n\n\n  \"rentEpoch\": 18446744073709552000,\n\n\n\n  \"space\": 82\n\n\n\n}\n\n\n\n```\n\nYou can view the fully deserialized [Mint Account](https://explorer.solana.com/address/EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v?cluster=mainnet-beta) data on the Solana Explorer.\nThe `address` field contains the Mint account's address.\nThe mint account's address is used to identify the token on the Solana network.\nThe `mintAuthority` field shows the authority allowed to mint new tokens.\nThis is the only account that can create new units of the token.\nThe `supply` field shows the total number of tokens that have been minted.\nThis value is in the smallest unit of the token. To get the total supply in standard units, adjust the value of the `supply` field by the `decimals`.\nThe `decimals` field shows the number of decimal places for the token.\nThe `isInitialized` field indicates if the Mint account has been initialized. This field is a security check used in the Token Program.\nThe `freezeAuthority` field shows the authority allowed to freeze token accounts.\nA token account that is frozen cannot transfer or burn the token in the account.\nThe `tlvData` field contains extra data for Token Extensions (requires further deserialization).\nThis field is only relevant to accounts created by the Token Extension Program (Token2022).\n```\n\n\n\n\n{\n\n\n\n  \"address\": \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n\n\n\n  \"mintAuthority\": \"BJE5MMbqXjVwjAF7oxwPYXnTXDyspzZyt4vwenNw5ruG\",\n\n\n\n  \"supply\": \"8985397351591790\",\n\n\n\n  \"decimals\": 6,\n\n\n\n  \"isInitialized\": true,\n\n\n\n  \"freezeAuthority\": \"7dGbd2QZcCKcTndnHcTL8q7SMVXAkp688NTQYwrRCrar\",\n\n\n\n  \"tlvData\": {\n\n\n\n    \"type\": \"Buffer\",\n\n\n\n    \"data\": []\n\n\n\n  }\n\n\n\n}\n\n\n\n```\n\nIs this page helpful?\n[Previous Quick Start](https://solana.com/docs/intro/quick-start)[Next Writing to Network](https://solana.com/docs/intro/quick-start/writing-to-network)\n[Fetch Wallet Account](https://solana.com/docs/intro/quick-start/reading-from-network#fetch-wallet-account)[Fetch Token Program](https://solana.com/docs/intro/quick-start/reading-from-network#fetch-token-program)[Fetch Mint Account](https://solana.com/docs/intro/quick-start/reading-from-network#fetch-mint-account)[Deserialize Mint Account](https://solana.com/docs/intro/quick-start/reading-from-network#deserialize-mint-account)\n[Edit Page](https://github.com/solana-foundation/solana-com/blob/main/apps/web/content/docs/en/intro/quick-start/reading-from-network.mdx)\nManaged by\n[](https://solana.com/)\n[](https://solana.com/youtube)[](https://solana.com/twitter)[](https://solana.com/discord)[](https://solana.com/reddit)[](https://solana.com/github)[](https://solana.com/telegram)\n© 2025 Solana Foundation. All rights reserved.\nSolana\n  * [Grants](https://solana.org/grants)\n  * [Break Solana](https://break.solana.com/)\n  * [Media Kit](https://solana.com/branding)\n  * [Careers](https://jobs.solana.com/)\n  * [Disclaimer](https://solana.com/tos)\n  * [Privacy Policy](https://solana.com/privacy-policy)\n\n\nGet Connected\n  * [Blog](https://solana.com/news)\n  * [Newsletter](https://solana.com/newsletter)\n\n\nen\n© 2025 Solana Foundation. All rights reserved.\nReading from Network | Solana\n",
      "wordCount": 3325,
      "title": "Reading from Network | Solana"
    },
    {
      "url": "https://solana.com/docs/intro/quick-start/writing-to-network",
      "content": "[Crypto's biggest startup competition is so back. Sign up now for the Solana Cypherpunk Hackathon](https://colosseum.com/cypherpunk)\nThis website uses cookies to offer you a better browsing experience. Find out more on how we use cookies.\nOpt-out[Details](https://solana.com/privacy-policy#collection-of-information)\nAccept\n[](https://solana.com/)\n  * Learn\n  * Developers\n  * Solutions\n  * Network\n  * Community\n\n\nSearch\n[Documentation](https://solana.com/docs)[API](https://solana.com/docs/rpc)[Cookbook](https://solana.com/developers/cookbook)[Get Support](https://solana.stackexchange.com/)\nGetting Started\n[Installation](https://solana.com/docs/intro/installation)\n[Quick Start](https://solana.com/docs/intro/quick-start)\n[Reading from Network](https://solana.com/docs/intro/quick-start/reading-from-network)[Writing to Network](https://solana.com/docs/intro/quick-start/writing-to-network)[Deploy a Program](https://solana.com/docs/intro/quick-start/deploying-programs)[Creating Deterministic Accounts](https://solana.com/docs/intro/quick-start/program-derived-address)[Composing Multiple Programs](https://solana.com/docs/intro/quick-start/cross-program-invocation)\n[Core Concepts](https://solana.com/docs/core)\n[Solana Account Model](https://solana.com/docs/core/accounts)[Transactions and Instructions](https://solana.com/docs/core/transactions)[Transaction Fees](https://solana.com/docs/core/fees)[Programs on Solana](https://solana.com/docs/core/programs)[Program Derived Address](https://solana.com/docs/core/pda)[Cross Program Invocation](https://solana.com/docs/core/cpi)\n[Tokens on Solana](https://solana.com/docs/tokens)\n[Basics](https://solana.com/docs/tokens/basics)\n[Extensions](https://solana.com/docs/tokens/extensions)\nDeveloping Programs\nFrontend\nSolana SDKs\nReferences\nTransfer SOL\n[Solana Documentation](https://solana.com/docs)Getting Started[Quick Start](https://solana.com/docs/intro/quick-start)\n# [Writing to Network](https://solana.com/docs/intro/quick-start/writing-to-network)\nIn the previous section, you learned how to read data from the Solana network. Now you'll learn how to write data to it. Writing to the Solana network involves sending transactions that contain one or more instructions.\nPrograms (smart contract) define the business logic for what each instruction does. When you submit a transaction, the Solana runtime executes each instruction in sequence and atomically (meaning either all instructions succeed or the entire transaction fails).\nThis section covers the following examples:\n  1. Transferring SOL between accounts\n  2. Creating a new token\n\n\nThese examples show how to build and send transactions to invoke Solana programs. For more details, refer to the [Transactions and Instructions](https://solana.com/docs/core/transactions) and [Fees on Solana](https://solana.com/docs/core/fees) pages.\n## [Transfer SOL](https://solana.com/docs/intro/quick-start/writing-to-network#transfer-sol)\nIn this example, you'll learn how to transfer SOL between two accounts.\nOn Solana, each account has a specific program as its owner. Only the program owner can deduct an account's SOL (lamport) balance.\nThe System Program is the [owner](https://github.com/anza-xyz/agave/blob/v2.1.11/sdk/account/src/lib.rs#L55) for all \"wallet\" accounts. To transfer SOL, you must invoke the System Program's [transfer](https://github.com/anza-xyz/agave/blob/v2.1.11/programs/system/src/system_processor.rs#L183-L213) instruction.\nTransfer SOL\n```\n\n\n\n\nimport {\n\n\n\n  LAMPORTS_PER_SOL,\n\n\n\n  SystemProgram,\n\n\n\n  Transaction,\n\n\n\n  sendAndConfirmTransaction,\n\n\n\n  Keypair,\n\n\n\n  Connection\n\n\n\n\n} from \"@solana/web3.js\";\n\n\n\n\nconst connection= new Connection(\"http://localhost:8899\", \"confirmed\");\n\n\n\n\nconst sender= new Keypair();\n\n\n\n\nconst receiver= new Keypair();\n\n\n\n\nconst signature = await connection.requestAirdrop(\n\n\n\n  sender.publicKey,\n\n\n\n  LAMPORTS_PER_SOL\n\n\n\n\n);\n\n\n\n\nawait connection.confirmTransaction(signature, \"confirmed\");\n\n\n\n\nconst transferInstruction= SystemProgram.transfer({\n\n\n\n  fromPubkey: sender.publicKey,\n\n\n\n  toPubkey: receiver.publicKey,\n\n\n\n  lamports: 0.01 * LAMPORTS_PER_SOL\n\n\n\n\n});\n\n\n\n\nconst transaction= new Transaction().add(transferInstruction);\n\n\n\n\nconst transactionSignature = await sendAndConfirmTransaction(\n\n\n\n  connection,\n\n\n\n  transaction,\n\n\n\n  [sender]\n\n\n\n\n);\n\n\n\n\nconsole.log(\"Transaction Signature:\", `${transactionSignature}`);\n\n\n\n\nconst senderBalance = await connection.getBalance(sender.publicKey);\n\n\n\n\nconst receiverBalance = await connection.getBalance(receiver.publicKey);\n\n\n\n\nconsole.log(\"Sender Balance:\", `${senderBalance}`);\n\n\n\n\nconsole.log(\"Receiver Balance:\", `${receiverBalance}`);\n\n\n\n\n```\n\nConsole\nRunClick to execute the code.\nTransfer SOL\n```\n\n\n\n\nimport {\n\n\n\n  LAMPORTS_PER_SOL,\n\n\n\n  SystemProgram,\n\n\n\n  Transaction,\n\n\n\n  sendAndConfirmTransaction,\n\n\n\n  Keypair,\n\n\n\n  Connection\n\n\n\n\n} from \"@solana/web3.js\";\n\n\n\n\nconst connection= new Connection(\"http://localhost:8899\", \"confirmed\");\n\n\n\n\nconst sender= new Keypair();\n\n\n\n\nconst receiver= new Keypair();\n\n\n\n\nconst signature = await connection.requestAirdrop(\n\n\n\n  sender.publicKey,\n\n\n\n  LAMPORTS_PER_SOL\n\n\n\n\n);\n\n\n\n\nawait connection.confirmTransaction(signature, \"confirmed\");\n\n\n\n\nconst transferInstruction= SystemProgram.transfer({\n\n\n\n  fromPubkey: sender.publicKey,\n\n\n\n  toPubkey: receiver.publicKey,\n\n\n\n  lamports: 0.01 * LAMPORTS_PER_SOL\n\n\n\n\n});\n\n\n\n\nconst transaction= new Transaction().add(transferInstruction);\n\n\n\n\nconst transactionSignature = await sendAndConfirmTransaction(\n\n\n\n  connection,\n\n\n\n  transaction,\n\n\n\n  [sender]\n\n\n\n\n);\n\n\n\n\nconsole.log(\"Transaction Signature:\", `${transactionSignature}`);\n\n\n\n\nconst senderBalance = await connection.getBalance(sender.publicKey);\n\n\n\n\nconst receiverBalance = await connection.getBalance(receiver.publicKey);\n\n\n\n\nconsole.log(\"Sender Balance:\", `${senderBalance}`);\n\n\n\n\nconsole.log(\"Receiver Balance:\", `${receiverBalance}`);\n\n\n\n\n```\n\nConsole\nRunClick to execute the code.\nCreate a `Connection` to handle sending transactions and fetching account data.\nIn this example, we're connecting to the local test validator which runs on `localhost:8899`.\nConnection\n```\n\n\nconst connection = new Connection(\"http://localhost:8899\", \"confirmed\");\n\n\n```\n\nGenerate new keypairs to use as the sender and receiver accounts.\nA `Keypair` includes:\n  * A public key which serves as the account address\n  * A private key used for signing transactions\n\n\nGenerate Keypairs\n```\n\n\n\n\nconst sender = new Keypair();\n\n\n\n\nconst receiver = new Keypair();\n\n\n\n\n```\n\nBefore we can transfer SOL, the sender account needs to have some SOL balance.\nOn networks other than mainnet, you can use the `requestAirdrop` method to get SOL for testing.\nAirdrop\n```\n\n\n\n\nconst signature = await connection.requestAirdrop(\n\n\n\n  sender.publicKey,\n\n\n\n  LAMPORTS_PER_SOL\n\n\n\n\n);\n\n\n\n\nawait connection.confirmTransaction(signature, \"confirmed\");\n\n\n\n\n```\n\nThe `SystemProgram.transfer()` method creates an instruction that transfers SOL from the `fromPubkey` account to the `toPubkey` account for the specified `lamports` amount.\nTransfer Instruction\n```\n\n\n\n\nconst transferInstruction = SystemProgram.transfer({\n\n\n\n  fromPubkey: sender.publicKey,\n\n\n\n  toPubkey: receiver.publicKey,\n\n\n\n  lamports: 0.01 * LAMPORTS_PER_SOL\n\n\n\n});\n\n\n\n```\n\nCreate a transaction and add the instruction to the transaction.\nIn this example, we're creating a transaction with a single instruction. However, you can add multiple instructions to a transaction.\nTransaction\n```\n\n\nconst transaction = new Transaction().add(transferInstruction);\n\n\n```\n\nSign and send the transaction to the network.\nThe sender keypair is required in the signers array to authorize the transfer of SOL from their account.\nSend Transaction\n```\n\n\n\n\nconst transactionSignature = await sendAndConfirmTransaction(\n\n\n\n  connection,\n\n\n\n  transaction,\n\n\n\n  [sender]\n\n\n\n);\n\n\n\n```\n\nThe transaction signature is a unique identifier that can be used to look up the transaction on Solana Explorer.\nCreate a `Connection` to handle sending transactions and fetching account data.\nIn this example, we're connecting to the local test validator which runs on `localhost:8899`.\nConnection\n```\n\n\nconst connection = new Connection(\"http://localhost:8899\", \"confirmed\");\n\n\n```\n\nGenerate new keypairs to use as the sender and receiver accounts.\nA `Keypair` includes:\n  * A public key which serves as the account address\n  * A private key used for signing transactions\n\n\nGenerate Keypairs\n```\n\n\n\n\nconst sender = new Keypair();\n\n\n\n\nconst receiver = new Keypair();\n\n\n\n\n```\n\nBefore we can transfer SOL, the sender account needs to have some SOL balance.\nOn networks other than mainnet, you can use the `requestAirdrop` method to get SOL for testing.\nAirdrop\n```\n\n\n\n\nconst signature = await connection.requestAirdrop(\n\n\n\n  sender.publicKey,\n\n\n\n  LAMPORTS_PER_SOL\n\n\n\n\n);\n\n\n\n\nawait connection.confirmTransaction(signature, \"confirmed\");\n\n\n\n\n```\n\nThe `SystemProgram.transfer()` method creates an instruction that transfers SOL from the `fromPubkey` account to the `toPubkey` account for the specified `lamports` amount.\nTransfer Instruction\n```\n\n\n\n\nconst transferInstruction = SystemProgram.transfer({\n\n\n\n  fromPubkey: sender.publicKey,\n\n\n\n  toPubkey: receiver.publicKey,\n\n\n\n  lamports: 0.01 * LAMPORTS_PER_SOL\n\n\n\n});\n\n\n\n```\n\nCreate a transaction and add the instruction to the transaction.\nIn this example, we're creating a transaction with a single instruction. However, you can add multiple instructions to a transaction.\nTransaction\n```\n\n\nconst transaction = new Transaction().add(transferInstruction);\n\n\n```\n\nSign and send the transaction to the network.\nThe sender keypair is required in the signers array to authorize the transfer of SOL from their account.\nSend Transaction\n```\n\n\n\n\nconst transactionSignature = await sendAndConfirmTransaction(\n\n\n\n  connection,\n\n\n\n  transaction,\n\n\n\n  [sender]\n\n\n\n);\n\n\n\n```\n\nThe transaction signature is a unique identifier that can be used to look up the transaction on Solana Explorer.\n```\n\n\n\n\nimport {\n\n\n\n  LAMPORTS_PER_SOL,\n\n\n\n  SystemProgram,\n\n\n\n  Transaction,\n\n\n\n  sendAndConfirmTransaction,\n\n\n\n  Keypair,\n\n\n\n  Connection\n\n\n\n\n} from \"@solana/web3.js\";\n\n\n\n\nconst connection = new Connection(\"http://localhost:8899\", \"confirmed\");\n\n\n\n\n```\n\n## [Create a Token](https://solana.com/docs/intro/quick-start/writing-to-network#create-a-token)\nIn this example, you'll learn how to create a new token on Solana using the Token Extensions Program. This requires two instructions:\n  1. Invoke the System Program to create a new account.\n  2. Invoke the Token Extensions Program to initialize that account as a Mint.\n\n\nCreate Mint Account\n```\n\n\n\n\nimport {\n\n\n\n  Connection,\n\n\n\n  Keypair,\n\n\n\n  SystemProgram,\n\n\n\n  Transaction,\n\n\n\n  sendAndConfirmTransaction,\n\n\n\n  LAMPORTS_PER_SOL\n\n\n\n\n} from \"@solana/web3.js\";\n\n\n\n\nimport {\n\n\n\n  MINT_SIZE,\n\n\n\n  TOKEN_2022_PROGRAM_ID,\n\n\n\n  createInitializeMint2Instruction,\n\n\n\n  getMinimumBalanceForRentExemptMint,\n\n\n\n  getMint\n\n\n\n\n} from \"@solana/spl-token\";\n\n\n\n\nconst connection = new Connection(\"http://localhost:8899\", \"confirmed\");\n\n\n\n\nconst wallet= new Keypair();\n\n\n\n\n// Fund the wallet with SOL\n\n\n\n\nconst signature = await connection.requestAirdrop(\n\n\n\n  wallet.publicKey,\n\n\n\n  LAMPORTS_PER_SOL\n\n\n\n\n);\n\n\n\n\nawait connection.confirmTransaction(signature, \"confirmed\");\n\n\n\n\n// Generate keypair to use as address of mint account\n\n\n\n\nconst mint= new Keypair();\n\n\n\n\n// Calculate lamports required for rent exemption\n\n\n\n\nconst rentExemptionLamports=\n\n\n\n  await getMinimumBalanceForRentExemptMint(connection);\n\n\n\n\n// Instruction to create new account with space for new mint account\n\n\n\n\nconst createAccountInstruction= SystemProgram.createAccount({\n\n\n\n  fromPubkey: wallet.publicKey,\n\n\n\n  newAccountPubkey: mint.publicKey,\n\n\n\n  space: MINT_SIZE,\n\n\n\n  lamports: rentExemptionLamports,\n\n\n\n  programId: TOKEN_2022_PROGRAM_ID\n\n\n\n\n});\n\n\n\n\n// Instruction to initialize mint account\n\n\n\n\nconst initializeMintInstruction= createInitializeMint2Instruction(\n\n\n\n  mint.publicKey,\n\n\n\n  2, // decimals\n\n\n\n  wallet.publicKey, // mint authority\n\n\n\n  wallet.publicKey, // freeze authority\n\n\n\n  TOKEN_2022_PROGRAM_ID\n\n\n\n\n);\n\n\n\n\n// Build transaction with instructions to create new account and initialize mint account\n\n\n\n\nconst transaction= new Transaction().add(\n\n\n\n  createAccountInstruction,\n\n\n\n  initializeMintInstruction\n\n\n\n\n);\n\n\n\n\nconst transactionSignature = await sendAndConfirmTransaction(\n\n\n\n  connection,\n\n\n\n  transaction,\n\n\n\n  [\n\n\n\n    wallet, // payer\n\n\n\n    mint // mint address keypair\n\n\n\n  ]\n\n\n\n\n);\n\n\n\n\nconsole.log(\"Transaction Signature:\", `${transactionSignature}`);\n\n\n\n\nconst mintData = await getMint(\n\n\n\n  connection,\n\n\n\n  mint.publicKey,\n\n\n\n  \"confirmed\",\n\n\n\n  TOKEN_2022_PROGRAM_ID\n\n\n\n\n);\n\n\n\n\nconsole.log(\n\n\n\n);\n\n\n\n```\n\nConsole\nRunClick to execute the code.\nCreate Mint Account\n```\n\n\n\n\nimport {\n\n\n\n  Connection,\n\n\n\n  Keypair,\n\n\n\n  SystemProgram,\n\n\n\n  Transaction,\n\n\n\n  sendAndConfirmTransaction,\n\n\n\n  LAMPORTS_PER_SOL\n\n\n\n\n} from \"@solana/web3.js\";\n\n\n\n\nimport {\n\n\n\n  MINT_SIZE,\n\n\n\n  TOKEN_2022_PROGRAM_ID,\n\n\n\n  createInitializeMint2Instruction,\n\n\n\n  getMinimumBalanceForRentExemptMint,\n\n\n\n  getMint\n\n\n\n\n} from \"@solana/spl-token\";\n\n\n\n\nconst connection = new Connection(\"http://localhost:8899\", \"confirmed\");\n\n\n\n\nconst wallet= new Keypair();\n\n\n\n\n// Fund the wallet with SOL\n\n\n\n\nconst signature = await connection.requestAirdrop(\n\n\n\n  wallet.publicKey,\n\n\n\n  LAMPORTS_PER_SOL\n\n\n\n\n);\n\n\n\n\nawait connection.confirmTransaction(signature, \"confirmed\");\n\n\n\n\n// Generate keypair to use as address of mint account\n\n\n\n\nconst mint= new Keypair();\n\n\n\n\n// Calculate lamports required for rent exemption\n\n\n\n\nconst rentExemptionLamports=\n\n\n\n  await getMinimumBalanceForRentExemptMint(connection);\n\n\n\n\n// Instruction to create new account with space for new mint account\n\n\n\n\nconst createAccountInstruction= SystemProgram.createAccount({\n\n\n\n  fromPubkey: wallet.publicKey,\n\n\n\n  newAccountPubkey: mint.publicKey,\n\n\n\n  space: MINT_SIZE,\n\n\n\n  lamports: rentExemptionLamports,\n\n\n\n  programId: TOKEN_2022_PROGRAM_ID\n\n\n\n\n});\n\n\n\n\n// Instruction to initialize mint account\n\n\n\n\nconst initializeMintInstruction= createInitializeMint2Instruction(\n\n\n\n  mint.publicKey,\n\n\n\n  2, // decimals\n\n\n\n  wallet.publicKey, // mint authority\n\n\n\n  wallet.publicKey, // freeze authority\n\n\n\n  TOKEN_2022_PROGRAM_ID\n\n\n\n\n);\n\n\n\n\n// Build transaction with instructions to create new account and initialize mint account\n\n\n\n\nconst transaction= new Transaction().add(\n\n\n\n  createAccountInstruction,\n\n\n\n  initializeMintInstruction\n\n\n\n\n);\n\n\n\n\nconst transactionSignature = await sendAndConfirmTransaction(\n\n\n\n  connection,\n\n\n\n  transaction,\n\n\n\n  [\n\n\n\n    wallet, // payer\n\n\n\n    mint // mint address keypair\n\n\n\n  ]\n\n\n\n\n);\n\n\n\n\nconsole.log(\"Transaction Signature:\", `${transactionSignature}`);\n\n\n\n\nconst mintData = await getMint(\n\n\n\n  connection,\n\n\n\n  mint.publicKey,\n\n\n\n  \"confirmed\",\n\n\n\n  TOKEN_2022_PROGRAM_ID\n\n\n\n\n);\n\n\n\n\nconsole.log(\n\n\n\n);\n\n\n\n```\n\nConsole\nRunClick to execute the code.\nCreating a token on Solana requires using both the `@solana/web3.js` and `@solana/spl-token` libraries.\n  * Create a connection\n  * Generate a keypair to pay for the transaction\n  * Request an airdrop to fund the keypair\n\n\nConnection & Wallet Setup\n```\n\n\n\n\nconst connection = new Connection(\"http://localhost:8899\", \"confirmed\");\n\n\n\n\nconst wallet = new Keypair();\n\n\n\n\nconst signature = await connection.requestAirdrop(\n\n\n\n  wallet.publicKey,\n\n\n\n  LAMPORTS_PER_SOL\n\n\n\n\n);\n\n\n\n\nawait connection.confirmTransaction(signature, \"confirmed\");\n\n\n\n\n```\n\nGenerate a keypair for the mint account.\nThe public key for this keypair will be used as the address for the mint account.\nMint Keypair\n```\n\n\nconst mint = new Keypair();\n\n\n```\n\nCalculate the minimum lamports required for a mint account.\nThe `getMinimumBalanceForRentExemptMint` function calculates exactly how much SOL (in lamports) must be allocated for the data on a mint account.\nRent Exemption\n```\n\n\n\n\nconst rentExemptionLamports =\n\n\n\n  await getMinimumBalanceForRentExemptMint(connection);\n\n\n\n\n```\n\nThe first instruction invokes the System Program's `createAccount` instruction to:\n  1. Allocate the required bytes for storing mint data\n  2. Transfer lamports from the wallet to fund the new account\n  3. Assign ownership of the account to the Token Extensions program (`TOKEN_2022_PROGRAM_ID`)\n\n\nCreate Account Instruction\n```\n\n\n\n\nconst createAccountInstruction = SystemProgram.createAccount({\n\n\n\n  fromPubkey: wallet.publicKey,\n\n\n\n  newAccountPubkey: mint.publicKey,\n\n\n\n  space: MINT_SIZE,\n\n\n\n  lamports: rentExemptionLamports,\n\n\n\n  programId: TOKEN_2022_PROGRAM_ID\n\n\n\n});\n\n\n\n```\n\nThe second instruction invokes the Token Extensions Program's `createInitializeMint2Instruction` instruction to initialize the mint account with the following data:\n  * 2 decimals\n  * Wallet as both mint authority and freeze authority\n\n\nInitialize Mint Instruction\n```\n\n\n\n\nconst initializeMintInstruction = createInitializeMint2Instruction(\n\n\n\n  mint.publicKey,\n\n\n\n  2,\n\n\n\n  wallet.publicKey,\n\n\n\n  wallet.publicKey,\n\n\n\n  TOKEN_2022_PROGRAM_ID\n\n\n\n);\n\n\n\n```\n\nAdd both instructions to a single transaction.\nBy combining both instructions into a single transaction, you ensure that the account creation and initialization happen atomically. Either both instructions succeed, or neither does.\nThis approach is common when building more complex Solana transactions, as it guarantees that all instructions execute together.\nTransaction\n```\n\n\n\n\nconst transaction = new Transaction().add(\n\n\n\n  createAccountInstruction,\n\n\n\n  initializeMintInstruction\n\n\n\n);\n\n\n\n```\n\nSign and send the transaction. Two signatures are required:\n  * Wallet signs as the payer for transaction fees and account creation\n  * Mint signs to authorize the use of its address for the new account\n\n\nSend Transaction\n```\n\n\n\n\nconst transactionSignature = await sendAndConfirmTransaction(\n\n\n\n  connection,\n\n\n\n  transaction,\n\n\n\n  [\n\n\n\n    wallet,\n\n\n\n    mint\n\n\n\n  ]\n\n\n\n);\n\n\n\n```\n\nThe transaction signature returned can be used to inspect the transaction on Solana Explorer.\nCreating a token on Solana requires using both the `@solana/web3.js` and `@solana/spl-token` libraries.\n  * Create a connection\n  * Generate a keypair to pay for the transaction\n  * Request an airdrop to fund the keypair\n\n\nConnection & Wallet Setup\n```\n\n\n\n\nconst connection = new Connection(\"http://localhost:8899\", \"confirmed\");\n\n\n\n\nconst wallet = new Keypair();\n\n\n\n\nconst signature = await connection.requestAirdrop(\n\n\n\n  wallet.publicKey,\n\n\n\n  LAMPORTS_PER_SOL\n\n\n\n\n);\n\n\n\n\nawait connection.confirmTransaction(signature, \"confirmed\");\n\n\n\n\n```\n\nGenerate a keypair for the mint account.\nThe public key for this keypair will be used as the address for the mint account.\nMint Keypair\n```\n\n\nconst mint = new Keypair();\n\n\n```\n\nCalculate the minimum lamports required for a mint account.\nThe `getMinimumBalanceForRentExemptMint` function calculates exactly how much SOL (in lamports) must be allocated for the data on a mint account.\nRent Exemption\n```\n\n\n\n\nconst rentExemptionLamports =\n\n\n\n  await getMinimumBalanceForRentExemptMint(connection);\n\n\n\n\n```\n\nThe first instruction invokes the System Program's `createAccount` instruction to:\n  1. Allocate the required bytes for storing mint data\n  2. Transfer lamports from the wallet to fund the new account\n  3. Assign ownership of the account to the Token Extensions program (`TOKEN_2022_PROGRAM_ID`)\n\n\nCreate Account Instruction\n```\n\n\n\n\nconst createAccountInstruction = SystemProgram.createAccount({\n\n\n\n  fromPubkey: wallet.publicKey,\n\n\n\n  newAccountPubkey: mint.publicKey,\n\n\n\n  space: MINT_SIZE,\n\n\n\n  lamports: rentExemptionLamports,\n\n\n\n  programId: TOKEN_2022_PROGRAM_ID\n\n\n\n});\n\n\n\n```\n\nThe second instruction invokes the Token Extensions Program's `createInitializeMint2Instruction` instruction to initialize the mint account with the following data:\n  * 2 decimals\n  * Wallet as both mint authority and freeze authority\n\n\nInitialize Mint Instruction\n```\n\n\n\n\nconst initializeMintInstruction = createInitializeMint2Instruction(\n\n\n\n  mint.publicKey,\n\n\n\n  2,\n\n\n\n  wallet.publicKey,\n\n\n\n  wallet.publicKey,\n\n\n\n  TOKEN_2022_PROGRAM_ID\n\n\n\n);\n\n\n\n```\n\nAdd both instructions to a single transaction.\nBy combining both instructions into a single transaction, you ensure that the account creation and initialization happen atomically. Either both instructions succeed, or neither does.\nThis approach is common when building more complex Solana transactions, as it guarantees that all instructions execute together.\nTransaction\n```\n\n\n\n\nconst transaction = new Transaction().add(\n\n\n\n  createAccountInstruction,\n\n\n\n  initializeMintInstruction\n\n\n\n);\n\n\n\n```\n\nSign and send the transaction. Two signatures are required:\n  * Wallet signs as the payer for transaction fees and account creation\n  * Mint signs to authorize the use of its address for the new account\n\n\nSend Transaction\n```\n\n\n\n\nconst transactionSignature = await sendAndConfirmTransaction(\n\n\n\n  connection,\n\n\n\n  transaction,\n\n\n\n  [\n\n\n\n    wallet,\n\n\n\n    mint\n\n\n\n  ]\n\n\n\n);\n\n\n\n```\n\nThe transaction signature returned can be used to inspect the transaction on Solana Explorer.\n```\n\n\n\n\nimport {\n\n\n\n  Connection,\n\n\n\n  Keypair,\n\n\n\n  SystemProgram,\n\n\n\n  Transaction,\n\n\n\n  sendAndConfirmTransaction,\n\n\n\n  LAMPORTS_PER_SOL\n\n\n\n\n} from \"@solana/web3.js\";\n\n\n\n\nimport {\n\n\n\n  MINT_SIZE,\n\n\n\n  TOKEN_2022_PROGRAM_ID,\n\n\n\n  createInitializeMint2Instruction,\n\n\n\n  getMinimumBalanceForRentExemptMint,\n\n\n\n  getMint\n\n\n\n\n} from \"@solana/spl-token\";\n\n\n\n\nconst connection = new Connection(\"http://localhost:8899\", \"confirmed\");\n\n\n\n\nconst wallet = new Keypair();\n\n\n\n\nconst signature = await connection.requestAirdrop(\n\n\n\n  wallet.publicKey,\n\n\n\n  LAMPORTS_PER_SOL\n\n\n\n\n);\n\n\n\n\nawait connection.confirmTransaction(signature, \"confirmed\");\n\n\n\n\n```\n\nIs this page helpful?\n[Previous Reading from Network](https://solana.com/docs/intro/quick-start/reading-from-network)[Next Deploy a Program](https://solana.com/docs/intro/quick-start/deploying-programs)\n[Transfer SOL](https://solana.com/docs/intro/quick-start/writing-to-network#transfer-sol)[Create a Token](https://solana.com/docs/intro/quick-start/writing-to-network#create-a-token)\n[Edit Page](https://github.com/solana-foundation/solana-com/blob/main/apps/web/content/docs/en/intro/quick-start/writing-to-network.mdx)\nManaged by\n[](https://solana.com/)\n[](https://solana.com/youtube)[](https://solana.com/twitter)[](https://solana.com/discord)[](https://solana.com/reddit)[](https://solana.com/github)[](https://solana.com/telegram)\n© 2025 Solana Foundation. All rights reserved.\nSolana\n  * [Grants](https://solana.org/grants)\n  * [Break Solana](https://break.solana.com/)\n  * [Media Kit](https://solana.com/branding)\n  * [Careers](https://jobs.solana.com/)\n  * [Disclaimer](https://solana.com/tos)\n  * [Privacy Policy](https://solana.com/privacy-policy)\n\n\nGet Connected\n  * [Blog](https://solana.com/news)\n  * [Newsletter](https://solana.com/newsletter)\n\n\nen\n© 2025 Solana Foundation. All rights reserved.\nWriting to Network | Solana\n",
      "wordCount": 2252,
      "title": "Writing to Network | Solana"
    },
    {
      "url": "https://solana.com/docs/intro/quick-start/deploying-programs",
      "content": "[Crypto's biggest startup competition is so back. Sign up now for the Solana Cypherpunk Hackathon](https://colosseum.com/cypherpunk)\nThis website uses cookies to offer you a better browsing experience. Find out more on how we use cookies.\nOpt-out[Details](https://solana.com/privacy-policy#collection-of-information)\nAccept\n[](https://solana.com/)\n  * Learn\n  * Developers\n  * Solutions\n  * Network\n  * Community\n\n\nSearch\n[Documentation](https://solana.com/docs)[API](https://solana.com/docs/rpc)[Cookbook](https://solana.com/developers/cookbook)[Get Support](https://solana.stackexchange.com/)\nGetting Started\n[Installation](https://solana.com/docs/intro/installation)\n[Quick Start](https://solana.com/docs/intro/quick-start)\n[Reading from Network](https://solana.com/docs/intro/quick-start/reading-from-network)[Writing to Network](https://solana.com/docs/intro/quick-start/writing-to-network)[Deploy a Program](https://solana.com/docs/intro/quick-start/deploying-programs)[Creating Deterministic Accounts](https://solana.com/docs/intro/quick-start/program-derived-address)[Composing Multiple Programs](https://solana.com/docs/intro/quick-start/cross-program-invocation)\n[Core Concepts](https://solana.com/docs/core)\n[Solana Account Model](https://solana.com/docs/core/accounts)[Transactions and Instructions](https://solana.com/docs/core/transactions)[Transaction Fees](https://solana.com/docs/core/fees)[Programs on Solana](https://solana.com/docs/core/programs)[Program Derived Address](https://solana.com/docs/core/pda)[Cross Program Invocation](https://solana.com/docs/core/cpi)\n[Tokens on Solana](https://solana.com/docs/tokens)\n[Basics](https://solana.com/docs/tokens/basics)\n[Extensions](https://solana.com/docs/tokens/extensions)\nDeveloping Programs\nFrontend\nSolana SDKs\nReferences\nCreate Anchor Project\n[Solana Documentation](https://solana.com/docs)Getting Started[Quick Start](https://solana.com/docs/intro/quick-start)\n# [Deploy Your First Solana Program](https://solana.com/docs/intro/quick-start/deploying-programs)\nBuild, deploy, and test your first [program](https://solana.com/docs/core/programs) to the Solana Blockchain using the Anchor framework. This guide will help you become more familiar with the Solana Playground and prepare you to use program derived addresses (PDA) and cross-program invocation (CPI).\n### [Create Anchor Project](https://solana.com/docs/intro/quick-start/deploying-programs#create-anchor-project)\n  1. Open the [Solana Playground](https://beta.solpg.io) in your web browser\n  2. On the left panel, click **+ Create a new project**\n  3. Enter a **Project name**\n  4. Select **Anchor (Rust)** as the framework\n  5. Click **Create**\n\n\n![New Project](https://solana.com/assets/docs/intro/quickstart/pg-new-project.gif)New Project\nThe `src/lib.rs` source file will open. It contains one struct called `Initialize`, which does the following:\n  * Receives a required parameter called `data: u64`\n  * Creates a new account\n  * Saves the value of `data: u64` to the new account\n  * Adds a message to the transaction's program logs\n\n\nlib.rs\n```\n\n\n\n\nuse anchor_lang::prelude::*;\n\n\n\n\n// This is your program's public key and it will update\n\n\n\n\n// automatically when you build the project.\n\n\n\n\ndeclare_id!(\"11111111111111111111111111111111\");\n\n\n\n\n#[program]\n\n\n\n\nmod hello_anchor {\n\n\n\n    use super::*;\n\n\n\n    pub fn initialize(ctx: Context<Initialize>, data: u64) -> Result<()> {\n\n\n\n        ctx.accounts.new_account.data = data;\n\n\n\n        msg!(\"Changed data to: {}!\", data); // Message will show up in the tx logs\n\n\n\n        Ok(())\n\n\n\n    }\n\n\n\n\n}\n\n\n\n\n#[derive(Accounts)]\n\n\n\n\npub struct Initialize<'info> {\n\n\n\n    // We must specify the space in order to initialize an account.\n\n\n\n    // First 8 bytes are default account discriminator,\n\n\n\n    // next 8 bytes come from NewAccount.data being type u64.\n\n\n\n    // (u64 = 64 bits unsigned integer = 8 bytes)\n\n\n\n    #[account(\n\n\n\n      init,\n\n\n\n      payer= signer,\n\n\n\n      space= 8 + 8\n\n\n\n    )]\n\n\n\n    pub new_account: Account<'info, NewAccount>,\n\n\n\n    #[account(mut)]\n\n\n\n    pub signer: Signer<'info>,\n\n\n\n    pub system_program: Program<'info, System>,\n\n\n\n\n}\n\n\n\n\n#[account]\n\n\n\n\npub struct NewAccount {\n\n\n\n    data: u64\n\n\n\n}\n\n\n\n```\n\n### [Build and Deploy the Program](https://solana.com/docs/intro/quick-start/deploying-programs#build-and-deploy-the-program)\n  1. Compile the program code\n\n\nTerminal\n```\n\n\n\n\n$ \n\nbuild\n\nCopy\n\n\n\n[show output]\n\n\n\n```\n\nYour [program ID](https://solana.com/docs/intro/quick-start/deploying-programs), defined in `declare_id!()`, will now be updated.\n  1. Add SOL to your wallet _(Optional)_\n\n\nDeploying a program requires SOL in the program's on-chain account. If necessary, [add SOL to your wallet](https://solana.com/docs/intro/quick-start#add-sol-to-your-wallet) before proceeding to step 3.\n  1. Deploy the program to the network\n\n\nTerminal\n```\n\n\n\n\n$ \n\ndeploy\n\nCopy\n\n\n\n[show output]\n\n\n\n```\n\nWhen deployed, the program's bytecode is stored in an executable program account.\n**Note:** If preferred, you can use the **Build** and **Deploy** buttons on the left-side panel, as shown in the screenshot below.\n![Build and Deploy](https://solana.com/assets/docs/intro/quickstart/pg-build-deploy.png)Build and Deploy\n### [Test the Program](https://solana.com/docs/intro/quick-start/deploying-programs#test-the-program)\n  1. Open the test file called `tests/anchor.test.ts`. This file demonstrates how to invoke the program's `initialize` struct from the client.\n\n\nanchor.test.ts\n```\n\n\n\n\n// No imports needed: web3, anchor, pg and more are globally available\n\n\n\n\ndescribe(\"Test\", () => {\n\n\n\n  it(\"initialize\", async () => {\n\n\n\n    // Generate keypair for the new account\n\n\n\n    const newAccountKp = new web3.Keypair();\n\n\n\n    // Send transaction\n\n\n\n    const data = new BN(42);\n\n\n\n    const txHash = await pg.program.methods\n\n\n\n      .initialize(data)\n\n\n\n      .accounts({\n\n\n\n        newAccount: newAccountKp.publicKey,\n\n\n\n        signer: pg.wallet.publicKey,\n\n\n\n        systemProgram: web3.SystemProgram.programId\n\n\n\n      })\n\n\n\n      .signers([newAccountKp])\n\n\n\n      .rpc();\n\n\n\n    console.log(`Use 'solana confirm -v ${txHash}' to see the logs`);\n\n\n\n    // Confirm transaction\n\n\n\n    await pg.connection.confirmTransaction(txHash);\n\n\n\n    // Fetch the created account\n\n\n\n    const newAccount = await pg.program.account.newAccount.fetch(\n\n\n\n      newAccountKp.publicKey\n\n\n\n    );\n\n\n\n    console.log(\"On-chain data is:\", newAccount.data.toString());\n\n\n\n    // Check whether the data on-chain is equal to local 'data'\n\n\n\n    assert(data.eq(newAccount.data));\n\n\n\n  });\n\n\n\n});\n\n\n\n```\n\n  1. Run the test file\n\n\nTerminal\n```\n\n\n\n\n$ \n\ntest\n\nCopy\n\n\n\n[show output]\n\n\n\n```\n\n  1. Store the transaction hash (`TxHash`) included in the output\n\n\n(In the example above, the transaction hash is `3TewJtiUz1EgtT88pLJHvKFzqrzDNuHVi8CfD2mWmHEBAaMfC5NAaHdmr19qQYfTiBace6XUmADvR4Qrhe8gH5uc`.)\n**Note:** If preferred, you can use the `Test` button on the left-side panel.\n![Run Test](https://solana.com/assets/docs/intro/quickstart/pg-test.png)Run Test\n  1. Run `solana confirm -v [TxHash]` to view the transaction logs\n\n\nTerminal\n```\n\n\n\n\n$ \n\nsolana confirm -v 3TewJtiUz1EgtT88pLJHvKFzqrzDNuHVi8CfD2mWmHEBAaMfC5NAaHdmr19qQYfTiBace6XUmADvR4Qrhe8gH5uc\n\nCopy\n\n\n\n[show output]\n\n\n\n```\n\n  1. View the transaction details\n\n\nOpen either [SolanaFM](https://solana.fm/) or [Solana Explorer](https://explorer.solana.com/?cluster=devnet) and search for the transaction hash.\n**Solana Explorer:** Set the network cluster to `devnet`, to match that of the Solana Playground.\n### [Close the Program](https://solana.com/docs/intro/quick-start/deploying-programs#close-the-program)\nClose the program to recover the SOL allocated to the on-chain program. To do so, run `solana program close [ProgramID]`, using the program address stored in the `declare_id!()` macro.\nTerminal\n```\n\n\n\n\n$ \n\nsolana program close 2VvQ11q8xrn5tkPNyeraRsPaATdiPx8weLAD8aD4dn2r\n\nCopy\n\n\n\n[show output]\n\n\n\n```\n\nPrograms can **only** be closed or updated by an account with upgrade authority. Your Playground wallet automatically becomes the upgrade authority for each program when it is deployed. If the upgrade authority is revoked, the program becomes immutable.\nCongratulations! You built and deployed your first Solana program using Anchor.\n## [Next steps](https://solana.com/docs/intro/quick-start/deploying-programs#next-steps)\nNow that you have deployed your first program, you are ready to explore [program-derived addresses](https://solana.com/docs/intro/quick-start/program-derived-address) and [cross-program invocation](https://solana.com/docs/intro/quick-start/cross-program-invocation).\nIs this page helpful?\n[Previous Writing to Network](https://solana.com/docs/intro/quick-start/writing-to-network)[Next Creating Deterministic Accounts](https://solana.com/docs/intro/quick-start/program-derived-address)\n[Create Anchor Project](https://solana.com/docs/intro/quick-start/deploying-programs#create-anchor-project)[Build and Deploy the Program](https://solana.com/docs/intro/quick-start/deploying-programs#build-and-deploy-the-program)[Test the Program](https://solana.com/docs/intro/quick-start/deploying-programs#test-the-program)[Close the Program](https://solana.com/docs/intro/quick-start/deploying-programs#close-the-program)[Next steps](https://solana.com/docs/intro/quick-start/deploying-programs#next-steps)\n[Edit Page](https://github.com/solana-foundation/solana-com/blob/main/apps/web/content/docs/en/intro/quick-start/deploying-programs.mdx)\nManaged by\n[](https://solana.com/)\n[](https://solana.com/youtube)[](https://solana.com/twitter)[](https://solana.com/discord)[](https://solana.com/reddit)[](https://solana.com/github)[](https://solana.com/telegram)\n© 2025 Solana Foundation. All rights reserved.\nSolana\n  * [Grants](https://solana.org/grants)\n  * [Break Solana](https://break.solana.com/)\n  * [Media Kit](https://solana.com/branding)\n  * [Careers](https://jobs.solana.com/)\n  * [Disclaimer](https://solana.com/tos)\n  * [Privacy Policy](https://solana.com/privacy-policy)\n\n\nGet Connected\n  * [Blog](https://solana.com/news)\n  * [Newsletter](https://solana.com/newsletter)\n\n\nen\n© 2025 Solana Foundation. All rights reserved.\nDeploy Your First Solana Program | Solana\n",
      "wordCount": 897,
      "title": "Deploy Your First Solana Program | Solana"
    }
  ]
}